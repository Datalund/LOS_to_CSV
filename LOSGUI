#Add needed Types for creating a Windows Form
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing


############################################################################################ Setting up the Windows form ############################################################################################

#Set enviroment for script
$IsHome = "no"
$IsTest = "Yes"

# Setup version number
$version = "Version 1.007"

# Shared variables used for creating CSV files later in the script
$Encoding = 'UTF8'

try {
    If ($IsHome -eq "Yes") {
        # Directories used in the script for Home enviroment
        $logFilePath = "C:\Users\Datalund\Desktop\TestMappe\LOStilCSV\"
        $FolderPath = "C:\Users\Datalund\Desktop\TestMappe\LOStilCSV\"
        $orgReferenceFilePath = "C:\Users\Datalund\Desktop\Powershell\LOS Master Data\Organisations Enheder\"
        $dynTempDir = 'C:\Users\Datalund\Desktop\TestMappe\Dania\Ressourcer\'
        $Delimiter = ','
    }
    else {
        # Directories used in the script for Kolding enviroment
        $versionFilePath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\"
        $logFilePath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\LOS udførsel\Logs\"
        $FolderPath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\LOS udførsel\LOS til CSV\"
        $orgReferenceFilePath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\LOS Master Data\Organisations Enheder\"
        $locationReferenceFilePath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\LOS Master Data\Lokationer\"
        $ressourceReferenceFilePath = "\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Projekt og Udvikling\LOS\LOS Master Data\Alle OIS Ressourcer\"
        $dynTempDir = '\\Kolding.dk\koldfs\alle_system$\Dania\Ressourcer\'
        $Delimiter = ';'
    }
    if ($IsTest = "Yes") {
        $dynTempDir = '\\Kolding.dk\koldfs\KOLDING\CF IT og digitalisering\Brugere\Martin Lund Kristensen\DynTempTest\'
    }
    else {
        $dynTempDir = '\\Kolding.dk\koldfs\alle_system$\Dania\Ressourcer\'
    }    
}
catch {
    $errorMessage = "Fejl under stikonfiguration:`n$($_.Exception.Message)"

    # Vis en fejldialogboks til brugeren
    [System.Windows.Forms.MessageBox]::Show($errorMessage, "Fejl under stikonfiguration", "OK", "Error")

    return  # Stop scriptets udførelse i denne metode eller funktion
}

# Get the current date and format it for the log file name
$currentDate = Get-Date -Format "dd-MM-yyyy"

# Shared variables for both enviroments
$versionFile = Join-Path $versionFilePath "Versionshistorik LOS værktøj.docx"
$logFile = Join-Path $logFilePath "LOS_log_$currentDate.txt"
$deleteDynTempFolder = Join-Path $dynTempDir "\Slettede afdelinger"
$orgReferenceFile = Import-Csv -Path (Join-Path $orgReferenceFilePath "dataobjects_1000504.csv") -Delimiter ";" -Encoding UTF7 | Sort-Object NRID -Unique
$locationReferenceFile = Import-Csv -Path (Join-Path $locationReferenceFilePath "dataobjects_1000558.csv") -Delimiter ";" -Encoding UTF7
$ressourceReferenceFile = Import-Csv -Path (Join-Path $ressourceReferenceFilePath "dataobjects_1000686.csv") -Delimiter ";" -Encoding UTF7 | Sort-Object System
$SAPASystem = $ressourceReferenceFile | Where-Object { $_.System -eq "SAPA" }

# Create an array to store paths that do not exist
$nonexistentPaths = @()

# Check if the specified paths exist
if (!(Test-Path $logFilePath)) {
    $nonexistentPaths += "Log fil sti: $logFilePath"
}

if (!(Test-Path $orgReferenceFilePath)) {
    $nonexistentPaths += "Organisations referense fil sti: $orgReferenceFilePath"
}

if (!(Test-Path $dynTempDir)) {
    $nonexistentPaths += "Dynamic template sti: $dynTempDir"
}

if (!(Test-Path $ressourceReferenceFilePath)) {
    $nonexistentPaths += "Dynamic template sti: $ressourceReferenceFilePath"
}


# If any nonexistent paths were found, display an error message and stop further execution
if ($nonexistentPaths.Count -gt 0) {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under indlæsning af data følgende sti:`n"
    foreach ($path in $nonexistentPaths) {
        $logEntry += "- $path`n"
    }
    # Skriv fejlen til logfilen
    Add-Content -Path $logFile -Value "`r`n`r`n--- [$timestamp] : NY KØRSEL ---`r`n"
    Add-Content -Path $logfile -Value $logEntry
    return
}
else {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] Alle stier til data kunne indlæses"
    Add-Content -Path $logFile -Value "`r`n`r`n--- [$timestamp] : NY KØRSEL ---`r`n"
    Add-Content -Path $logfile -Value $successText -NoNewline
}

# If the log file already exists, add a separator to indicate a new run
if (Test-Path $logFile) {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    Add-Content -Path $logFile -Value "`n[$timestamp] Logfilen fandtes allerede. Tekst tilføjes`n"
}

# Create form
try {
    $Form = New-Object System.Windows.Forms.Form
    $Form.Text = "Importer LOS til CSV"
    $Form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle
    $Form.MaximizeBox = $false
    $Form.MinimizeBox = $false
    $Form.StartPosition = "CenterScreen"

    # Set the initial size of the form
    $initialWidth = 800
    $initialHeight = 450
    $Form.ClientSize = New-Object System.Drawing.Size($initialWidth, $initialHeight)

    function LimitFormSizeAndPosition {
        # Get the screen working area
        $screenWorkingArea = [System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea

        # Calculate the maximum allowed width and height
        $maxWidth = $screenWorkingArea.Width - 10
        $maxHeight = $screenWorkingArea.Height - 10

        # Check and adjust form width
        if ($Form.Width -gt $maxWidth) {
            $Form.Width = $maxWidth
        }

        # Check and adjust form height
        if ($Form.Height -gt $maxHeight) {
            $Form.Height = $maxHeight
        }

        # Get the form location
        $formLocation = $Form.Location

        # Check and adjust form X position
        if ($formLocation.X -lt $screenWorkingArea.X) {
            $formLocation.X = $screenWorkingArea.X
        }
        elseif ($formLocation.X + $Form.Width -gt $screenWorkingArea.Right) {
            $formLocation.X = $screenWorkingArea.Right - $Form.Width
        }

        # Check and adjust form Y position
        if ($formLocation.Y -lt $screenWorkingArea.Y) {
            $formLocation.Y = $screenWorkingArea.Y
        }
        elseif ($formLocation.Y + $Form.Height -gt $screenWorkingArea.Bottom) {
            $formLocation.Y = $screenWorkingArea.Bottom - $Form.Height
        }

        # Update form location
        $Form.Location = $formLocation

        # Center the form if its size has changed
        if (($Form.Width -ne $Form.Tag.Width) -or ($Form.Height -ne $Form.Tag.Height)) {
            $Form.Left = $Form.Left + ($Form.Tag.Width - $Form.Width) / 2
            $Form.Top = $Form.Top + ($Form.Tag.Height - $Form.Height) / 2
            $Form.Tag = $Form.Size
        }
        # Ensure right edge of the form is at least 10 pixels to the right of the right edge of $StatusLabel
        $minFormRight = $StatusLabel.Right + 10
        if ($Form.Right -le $minFormRight) {
            $Form.Left = $Form.Left - ($minFormRight - $Form.Right)
        }
    }

    # Event handler for Form.Resize event
    $Form.add_Resize({ LimitFormSizeAndPosition })

    # Initial call to set the initial form size
    $Form.Tag = $Form.Size
    LimitFormSizeAndPosition

    # Get the current user
    $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name

    # Call the function to limit the initial form size and position
    LimitFormSizeAndPosition

    # Log entry for successful form creation
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "-----Start på oprettelse af Form-----`r`n`[$timestamp] Form oprettet uden fejl.`r`n[$timestamp] Bruger: $currentUser"
    Add-Content -Path $logfile -Value $successText -NoNewline
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af form (Bruger: $currentUser):`r`n$_`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Set background colors
try {
    $Color = New-Object System.Drawing.Color
    $Color = [System.Drawing.Color]::RoyalBlue
    $Form.BackColor = $Color
    $ButtonColor = [System.Drawing.Color]::WhiteSmoke
    $BoxColor = [System.Drawing.Color]::Gainsboro

    # Log entry for successful setting of background colors
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "`r`n-----Start på tilpasning af Form-----`r`n[$timestamp] Baggrundsfarver indstillet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under indstilling af baggrundsfarver:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Create label to show selected file path
try {
    $FilePathLabel = New-Object System.Windows.Forms.Label
    $FilePathLabel.AutoSize = $true
    $Form.Controls.Add($FilePathLabel)

    # Log entry for successful creating a label for showing path
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] FilePathLabel oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af FilePathLabel:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}
function Clear-StatusLabel {
    $StatusLabel.Clear()
}

# Create rich text box to show Status with bold header
try {
    $StatusLabel = New-Object System.Windows.Forms.RichTextBox
    $StatusLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
    $StatusLabel.ScrollBars = "None"
    $StatusLabel.ReadOnly = $true
    $Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 10)
    $StatusLabel.Font = $Font
    $StatusLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
    $StatusLabel.SelectedText = "Status:`r`n"
    $StatusLabel.SelectionFont = $Font
    $StatusLabel.Visible = $false # Change to $false to hide initially
    $StatusLabel.BackColor = $BoxColor
    $StatusLabel.WordWrap = $true
    $StatusLabel.AutoSize = $true
    $Form.Controls.Add($StatusLabel)

    # Log entry for successful creation of StatusLabel
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] StatusLabel oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af StatusLabel:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Create rich text box to show sheet names with bold header
try {
    $SheetLabel = New-Object System.Windows.Forms.RichTextBox
    $SheetLabel.Location = New-Object System.Drawing.Point(10, 100)
    $SheetLabel.BorderStyle = [System.Windows.Forms.BorderStyle]::Fixed3D
    $SheetLabel.ScrollBars = "Vertical"
    $SheetLabel.ReadOnly = $true
    $Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 10)
    $SheetLabel.Font = $Font
    $SheetLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
    $SheetLabel.SelectedText = "Faner i LOS arket der indeholder data der skal ændres:`r`n"
    $SheetLabel.SelectionFont = $Font
    $SheetLabel.Visible = $false # Change to $false to hide initially
    $SheetLabel.BackColor = $BoxColor
    $Form.Controls.Add($SheetLabel)

    # Log entry for successful creation of SheetLabel
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] SheetLabel oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af SheetLabel:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Function to adjust Sheet Label size
try {
    function AdjustSheetLabelSize() {
        $stringSize = [System.Windows.Forms.TextRenderer]::MeasureText($SheetLabel.Text, $SheetLabel.Font)
        $SheetLabel.Width = $stringSize.Width + 50
        $SheetLabel.Height = $stringSize.Height + 4

    }

    # Call the function to adjust the initial size of the Sheet Label
    AdjustSheetLabelSize

    # Log entry for successful execution of AdjustSheetLabelSize function
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] AdjustSheetLabelSize funktion udført uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under udførelse af AdjustSheetLabelSize funktion:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

try {
    # Add text changed event to adjust the Sheet Label size
    $SheetLabel.add_TextChanged({
            AdjustSheetLabelSize
        })

    # Log entry for successful addition of text changed event
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] Tekstændringsbegivenhed tilføjet til SheetLabel uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under tilføjelse af tekstændringsbegivenhed til SheetLabel:`r`n$_`r`n`r`n"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}
# Function to adjust Status Label position
function AdjustStatusLabelPosition() {
    try {
        $stringSize = [System.Windows.Forms.TextRenderer]::MeasureText($StatusLabel.Text, $StatusLabel.Font)
        $newWidth = $stringSize.Width + 20
        $newHeight = $stringSize.Height + 4

        # Adjust the width and height of Status Label only if it exceeds the current size
        if ($newWidth -gt $StatusLabel.Width) {
            $StatusLabel.Width = $newWidth
        }

        if ($newHeight -gt $StatusLabel.Height) {
            $StatusLabel.Height = $newHeight
        }

        $yPosition = 100

        # Set a minimum height for the form based on Status Label box
        $minHeight = 450
        if ($yPosition + $StatusLabel.Height + $CancelButton.Height + 40 -gt $minHeight) {
            $minHeight = $yPosition + $StatusLabel.Height + $CancelButton.Height + 40
        }

        # Calculate the new minimum width based on Sheet Label and Status Label boxes
        $newMinWidth = $SheetLabel.Left + $SheetLabel.Width + 10 + $StatusLabel.Width + 10

        # Get the screen working area
        $screenWorkingArea = [System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea

        # Calculate the maximum allowed width and height
        $maxWidth = $screenWorkingArea.Width - 10
        $maxHeight = $screenWorkingArea.Height - 10


        # Check if the new minimum width exceeds the maximum width
        if ($newMinWidth -gt $maxWidth) {
            $newMinWidth = $maxWidth
        }

        # Check if the new minimum height exceeds the maximum height
        if ($newMinHeight -gt $maxHeight) {
            $newMinHeight = $maxHeight
        }        

        # Set the new size of the form
        $Form.ClientSize = New-Object System.Drawing.Size($newMinWidth, $minHeight)

        # Set the position of the status label
        $xPosition = $SheetLabel.Right + 10 + 10
        $maxXPosition = $Form.ClientSize.Width - $StatusLabel.Width - 10
        
        if ($xPosition -gt $maxXPosition) {
            $xPosition = $maxXPosition
        }

        $StatusLabel.Location = New-Object System.Drawing.Point($xPosition, $yPosition)

        # Call the LimitFormSizeAndPosition function to ensure the form stays within screen boundaries
        LimitFormSizeAndPosition
    }
    catch {
        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
        $logEntry = "[$timestamp] Fejl under justering af StatusLabel position:`r`n$_"

        # Write the error to the log file
        Add-Content -Path $logfile -Value $logEntry
    }
}

# Call the function to adjust the initial position of the Status Label
AdjustStatusLabelPosition

# Add resize event to adjust the Status Label position
$Form.Add_Resize({
        AdjustStatusLabelPosition
    })

# Update the Status Label size and position when the text changes
$StatusLabel.add_TextChanged({
        AdjustStatusLabelPosition
    })

# Set the vertical scrollbar and word wrap for the Status Label
$StatusLabel.ScrollBars = "Vertical"
$StatusLabel.WordWrap = $true

# Function to adjust Cancel Button position
function AdjustCancelButtonPosition() {
    $xPosition = $Form.ClientSize.Width - $CancelButton.Width - 10
    $yPosition = $StatusLabel.Bottom + 10
    $CancelButton.Location = New-Object System.Drawing.Point($xPosition, $yPosition)
}

# Create version and author label
try {
    $VersionLabel = New-Object System.Windows.Forms.Label
    $VersionLabel.AutoSize = $true
    $VersionLabel.Text = "$version"
    $Form.Controls.Add($VersionLabel)

    # Add MouseDown event to open the log file
    $VersionLabel.Add_MouseDown({
            Start-Process -FilePath $versionFile
        })

    # Create author label
    $AuthorLabel = New-Object System.Windows.Forms.Label
    $AuthorLabel.AutoSize = $true
    $AuthorLabel.Text = " | Forfatter: Martin Lund Kristensen"
    $Form.Controls.Add($AuthorLabel)

    # Add MouseDown event to open the author document
    $AuthorLabel.Add_MouseDown({
        Start-Process -FilePath $logFile
    })

    # Position the author label right after the version label
    $AuthorLabel.Location = New-Object System.Drawing.Point($VersionLabel.Right, $VersionLabel.Top)

    # Log entry for successful addition of version and author label
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] VersionLabel og AuthorLabel oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af VersionLabel:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Function to adjust version label position
function AdjustVersionLabelPosition() {
    try {
        $VersionLabel.Location = New-Object System.Drawing.Point(10, ($Form.ClientSize.Height - $VersionLabel.Height - 10))
        $AuthorLabel.Location = New-Object System.Drawing.Point($VersionLabel.Right, $VersionLabel.Top)
    }
    catch {
        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
        $logEntry = "[$timestamp] Fejl under justering af VersionLabel position: $($_.Exception.Message)"
    
        # Write the error to the log file
        Add-Content -Path $logfile -Value $logEntry
    }
}

# Call the function to adjust the initial position of the version label
try {
    AdjustVersionLabelPosition
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under justering af VersionLabel position: $($_.Exception.Message)"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Add resize event to adjust the version label position
$Form.Add_Resize({
        try {
            AdjustVersionLabelPosition
        }
        catch {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Fejl under justering af VersionLabel position og størrelse: $($_.Exception.Message)"
            # Write the error to the log file
            Add-Content -Path $logfile -Value $logEntry
        }
    })

# Perform check for Excel installation and version
function Test-ExcelInstallation {
    try {
        $excelRegistryPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\excel.exe"
        $excelPath = (Get-ItemProperty -Path $excelRegistryPath).'(default)'

        if ($excelPath) {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Excel er installeret på computeren"
            # Write the success to the log file
            Add-Content -Path $logfile -Value $logEntry
        }
        else {
            $message = "Dette script kræver at Excel er installeret på computeren."
            $Message += "`nDenne computer har ikke Excel installeret og kan derfor ikke afvikle scriptet."
            $Message += "`nInstaller Excel på computeren og prøv igen, eller kør scriptet på en computer der har Excel installeret"
            [System.Windows.Forms.MessageBox]::Show($message, "Excel mangler", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning) | Out-Null
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Excel er ikke installeret på computeren. Scriptet stopper"
            # Write the error to the log file
            Add-Content -Path $logfile -Value $logEntry
            exit
        }
    }
    catch {
        $message = "Scriptet kræver Excel, men der kan ikke findes en Excel installation på denne computer"
        $message += "`nEr Excel installeret på denne computer?"
        $confirmation = [System.Windows.Forms.MessageBox]::Show($message, "Test af Excel-installation", [System.Windows.Forms.MessageBoxButtons]::YesNo, [System.Windows.Forms.MessageBoxIcon]::Question)

        if ($confirmation -eq 'Yes') {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Excel er installeret på computeren ifølge brugerens bekræftelse"
            # Write the success to the log file
            Add-Content -Path $logfile -Value $logEntry
        }
        else {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Excel er ikke installeret på computeren ifølge brugerens bekræftelse"
            # Write the error to the log file
            Add-Content -Path $logfile -Value $logEntry
            exit
        }
    }
}

# Kald funktionen for at teste Excel-installationen
Test-ExcelInstallation

# Create tool tip object
try {
    $ToolTip = New-Object System.Windows.Forms.ToolTip
    # Log entry for successful creating ToolTip
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] ToolTip oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af ToolTip: $($_.Exception.Message)"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry
}

# Create browse button
try {
    $BrowseButton = New-Object System.Windows.Forms.Button
    $BrowseButton.Location = New-Object System.Drawing.Point(10, 10)
    $BrowseButton.Size = New-Object System.Drawing.Size(100, 30)
    $BrowseButton.Text = "Vælg LOS ark"
    $BrowseButton.BackColor = $ButtonColor
    $ToolTip.SetToolTip($BrowseButton, "Vælg hvilket LOS ark der skal hentes data fra")

    # Log entry for successful creation of browse button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] BrowseButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af BrowseButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af BrowseButton: $_"
}

# Create Dynamic Template create button (hidden initially)
try {
    $CreateDynButton = New-Object System.Windows.Forms.Button
    $CreateDynButton.Size = New-Object System.Drawing.Size(140, 30)
    $CreateDynButton.Text = "Opret Dynamic Template"
    $CreateDynButton.Visible = $false # Change to $true to show initially
    $CreateDynButton.Enabled = $false # Change to $true to enable initially
    $CreateDynButton.BackColor = $ButtonColor
    $ToolTip.SetToolTip($CreateDynButton, "Opret nye Dynamic Template foldere")

    # Log entry for successful creation of Dynamic Template create button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] CreateDynButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af CreateDynButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af CreateDynButton: $_"
}

# Create Dynamic Template change button (hidden initially)
try {
    $ChangeDynButton = New-Object System.Windows.Forms.Button
    $ChangeDynButton.Location = New-Object System.Drawing.Point(10, 10)
    $ChangeDynButton.Size = New-Object System.Drawing.Size(160, 30)
    $ChangeDynButton.Text = "Opdater Dynamic Template"
    $ChangeDynButton.Visible = $false # Change to $true to show initially
    $ChangeDynButton.Enabled = $false # Change to $true to enable initially
    $ChangeDynButton.BackColor = $ButtonColor
    $ToolTip.SetToolTip($ChangeDynButton, "Opdater eksisterende Dynamic Template foldere")

    # Log entry for successful creation of Create Dynamic Template button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] ChangeDynButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af ChangeDynButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af ChangeDynButton: $_"
}

# Create Dynamic Template delete button (hidden initially)
try {
    $DeleteDynButton = New-Object System.Windows.Forms.Button
    $DeleteDynButton.Location = New-Object System.Drawing.Point(10, 10)
    $DeleteDynButton.Size = New-Object System.Drawing.Size(140, 30)
    $DeleteDynButton.Text = "Slet Dynamic Template"
    $DeleteDynButton.Visible = $false # Change to $true to show initially
    $DeleteDynButton.Enabled = $false # Change to $true to enable initially
    $DeleteDynButton.BackColor = $ButtonColor
    $ToolTip.SetToolTip($DeleteDynButton, "Slet Dynamic Template foldere")

    # Log entry for successful creation of Delete Dynamic Template button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] DeleteDynButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af DeleteDynButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af DeleteDynButton: $_"
}


# Create export button (hidden initially)
try {
    $ExportButton = New-Object System.Windows.Forms.Button
    $ExportButton.Location = New-Object System.Drawing.Point(120, 10)
    $ExportButton.Size = New-Object System.Drawing.Size(100, 30)
    $ExportButton.Text = "Eksporter CSV"
    $ExportButton.Visible = $false # Change to $true to show initially
    $ExportButton.BackColor = $ButtonColor
    $Form.Controls.Add($ExportButton)

    # Log entry for successful creation of browse button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] ExportButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af ExportButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af ExportButton: $_"
}

# Create Open Folder button and set properties
try {
    $OpenFolderBtn = New-Object System.Windows.Forms.Button
    $OpenFolderBtn.Size = New-Object System.Drawing.Size(150, 30)
    $OpenFolderBtn.Text = "Åben Mappe"
    $OpenFolderBtn.BackColor = $ButtonColor
    $OpenFolderBtn.Visible = $false # Change to $true to show initially
    $OpenFolderBtn.Enabled = $false # Change to $true to enable initially
    $ToolTip.SetToolTip($OpenFolderBtn, "Åben mappen hvor CSV filerne er oprettet")
    
    # Log entry for successful creation of Open Folder button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] Open Folder Button oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af Open Folder Button:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af Open Folder Button: $_"
}

# Function to adjust Open Folder button position
function OpenFolderBtnPosition() {
    $OpenFolderBtn.Location = New-Object System.Drawing.Point(($Form.ClientSize.Width - $OpenFolderBtn.Width - 150), ($Form.ClientSize.Height - $OpenFolderBtn.Height - 10))
}

# Call the function to adjust the initial position of the Open Folder button
OpenFolderBtnPosition

# Add resize event to adjust the Open Folder button position
$Form.Add_Resize({
        OpenFolderBtnPosition
    })
     
# Create cancel button
Try {
    $CancelButton = New-Object System.Windows.Forms.Button
    $CancelButton.Size = New-Object System.Drawing.Size(100, 30)
    $CancelButton.Text = "Luk"
    $CancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $Form.CancelButton = $CancelButton
    $Form.Controls.Add($CancelButton)
    $CancelButton.BackColor = $ButtonColor
    $ToolTip.SetToolTip($CancelButton, "Afbryd og luk vinduet")
    
    # Log entry for successful creation of browse button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] CancelButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af CancelButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af CancelButton: $_"
}

# Function to adjust cancel button position
function AdjustCancelButtonPosition() {
    $CancelButton.Location = New-Object System.Drawing.Point(($Form.ClientSize.Width - $CancelButton.Width - 10), ($Form.ClientSize.Height - $CancelButton.Height - 10))
}

# Call the function to adjust the initial position of the cancel button
AdjustCancelButtonPosition

# Add resize event to adjust the cancel button position
$Form.Add_Resize({
        AdjustCancelButtonPosition
    })

# Create help button
Try {
    $HelpButton = New-Object System.Windows.Forms.PictureBox
    $HelpButton.Size = New-Object System.Drawing.Size(30, 30)
    $HelpButton.Image = [System.Drawing.SystemIcons]::Question.ToBitmap()
    $HelpButton.BackColor = $Color
    $ToolTip.SetToolTip($HelpButton, "Åbn brugervejledning på GitHub")
    $Form.Controls.Add($HelpButton)
    
    # Log entry for successful creation of help button
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $successText = "[$timestamp] HelpButton oprettet uden fejl."
    Add-Content -Path $logfile -Value $successText
}
catch {
    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
    $logEntry = "[$timestamp] Fejl under oprettelse af HelpButton:`r`n$_"

    # Write the error to the log file
    Add-Content -Path $logfile -Value $logEntry

    Write-Host "Fejl under oprettelse af HelpButton: $_"
}

# Create function to open Github
function HelpButtonClicked {
    # Åbn brugervejledning på GitHub i standardbrowseren
    Start-Process "https://github.com/Datalund/LOS_to_CSV/blob/main/README.md"   
}
    
$HelpButton.Add_Click({
        HelpButtonClicked
    })
    
# Juster positionen for hjælpeknappen
function AdjustHelpButtonPosition() {
    $xPosition = $Form.ClientSize.Width - $HelpButton.Width - 10
    $yPosition = 10
    $HelpButton.Location = New-Object System.Drawing.Point($xPosition, $yPosition)
}
    
AdjustHelpButtonPosition
$Form.Add_Resize({
        AdjustHelpButtonPosition
    })
    

# Log entry for end of form creation
$successText = "-----Slut på tilpasning af Form-----`n-----Slut på oprettelse af Form-----"
Add-Content -Path $logfile -Value $successText

############################################################################################ End of setting up the Windows form ############################################################################################

# Log entry for start of filehandling
$successText = "`n`n-----Start på håndtering af filer-----"
Add-Content -Path $logfile -Value $successText

# Add click event to cancel button
$CancelButton.Add_Click({
        # Release Excel resources
        try {
            if ($Excel -ne $null -and $global:Workbook -ne $null) {
                [System.GC]::Collect()
                [System.GC]::WaitForPendingFinalizers()
                $Excel.Quit()
                $Workbook.Close($false)
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Workbook = $null
                $global:Excel = $null
            }
        }
        catch {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Fejl opstod under lukning af Workbook og afslutning af Excel i Cancel button function: $_"
            Add-Content -Path $logfile -Value $logEntry
        }
        finally {
            if ($global:Workbook -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                $global:Workbook = $null
            }
            if ($global:Excel -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Excel = $null
            }
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
        $Form.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
        $Form.Close()
    })

# Continue the browse button function
$BrowseButton.Add_Click({
        $BrowsePath = "\\Kolding.dk\koldfs\ALLE_FAELLES$\Data\D030\"
        $CreateDynButton.Visible = $false
        $CreateDynButton.Enabled = $false
        $ChangeDynButton.Visible = $false
        $ChangeDynButton.Enabled = $false
        $DeleteDynButton.Visible = $false
        $DeleteDynButton.Enabled = $false
        $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $OpenFileDialog.Filter = "Excel Files (*.xlsx)|*.xlsx|All Files (*.*)|*.*"
        $OpenFileDialog.Title = "Vælg et LOS ark der skal indlæses"
        $OpenFileDialog.InitialDirectory = $BrowsePath
        $OpenFileDialog.CheckFileExists = $true

        Clear-StatusLabel
        $StatusLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
        $StatusLabel.SelectedText = "Status:`r`n"
    
        # Show the dialog box only if the user clicked OK
        if ($OpenFileDialog.ShowDialog() -eq "OK") {
            # Set global variable
            $global:FilePath = $OpenFileDialog.FileName
            $TextBox = New-Object System.Windows.Forms.TextBox
            $TextBox.Text = $FilePath
            
            # Show Sheet Label
            $SheetLabel.Visible = $true

            # Show Status Label and set text
            $StatusLabel.Visible = $true
            $StatusLabel.SelectedText = "LOS ark indlæses`r`n"

            # Clear the FilePathLabel before setting the new file path
            $FilePathLabel.Text = ""

            # Set the new file path in FilePathLabel
            $FilePathLabel.Text = "Sti til valgt fil: " + $FilePath
            $global:FolderName = $FilePath.split('\.')[-2]

            # Names on folders and CSV files used in the script
            $SubFolderToRun = 'Skal køres'
            $SubFolderDone = 'Kørt'
            $global:OrgCreateCSVName = 'Opret Org Enhed.csv'
            $global:OrgChangeCSVName = 'Opdater Org Enhed.csv'
            $global:LederFunkChangeSheet1Name = 'Opdater LederogBrugerfunktioner Update 1.csv'
            $global:LederFunkChangeSheet2Name = 'Opdater LederogBrugerfunktioner Update 2.csv'
            $global:SAPAChangeSheet1Name = 'Opdater SAPA roller Update 1.csv'
            $global:SAPAChangeSheet2Name = 'Opdater SAPA roller Update 2.csv'
            $global:UserSheetName = 'Opdater Org identiteter.csv'
            $global:AcadreCreateCSVName = 'Opret Acadre Enhed.csv'
            $global:AcadreChangeCSVName = 'Opdater Acadre Enhed.csv'
            $global:roleOwnerSheetName = 'Opdater RoleEjer.csv'
            $global:dlCreateSaveName = 'Opret DL Lister.csv'
            $global:dlChangeSaveName = 'Opdater DL Lister.csv'
            $global:dlDeleteSaveName = 'Exchange, Delete DL.csv'
            $global:CreateOrgFoldersName = 'Opret G-drev.csv'
            $global:RenameOrgFoldersName = 'Opdater G-drev.csv'
            $global:DynTempCreateSheetName = 'Opret Dynamic Template.csv'
            $global:DynTempChangeSheetName = 'Opdater Dynamic Template.csv'

            # Combine directories and names
            $global:FolderToCreate = Join-Path -Path $FolderPath -ChildPath $FolderName
            $global:CSVSavePath = Join-Path -Path $FolderToCreate -ChildPath $SubFolderToRun
            $global:PathWhenDone = Join-Path -Path $FolderToCreate -ChildPath $SubFolderDone
            $global:SaveOrgCreateSheet = Join-Path $CSVSavePath $OrgCreateCSVName
            $global:SaveOrgChangeSheet = Join-Path $CSVSavePath $OrgChangeCSVName
            $global:SavelederogBrugerFunkChangeSheet1 = Join-Path $CSVSavePath $LederFunkChangeSheet1Name
            $global:SavelederogBrugerFunkChangeSheet2 = Join-Path $CSVSavePath $LederFunkChangeSheet2Name
            $global:SaveSAPAChangeSheet1 = Join-Path $CSVSavePath $SAPAChangeSheet1Name
            $global:SaveSAPAChangeSheet2 = Join-Path $CSVSavePath $SAPAChangeSheet2Name
            $global:SaveAcadreCreateSheet = Join-Path $CSVSavePath $AcadreCreateCSVName
            $global:SaveAcadreChangeSheet = Join-Path $CSVSavePath $AcadreChangeCSVName
            $global:SaveUserSheet = Join-Path $CSVSavePath $UserSheetName
            $global:SaveRoleOwnerSheet = Join-Path $CSVSavePath $roleOwnerSheetName
            $global:SaveDlCreateSheet = Join-Path $CSVSavePath $DlCreateSaveName
            $global:SaveDLChangeSheet = Join-Path $CSVSavePath $dlChangeSaveName
            $global:SaveDlDeleteSheet = Join-Path $CSVSavePath $DlDeleteSaveName
            $global:SaveCreateOrgFoldersSheet = Join-Path $CSVSavePath $CreateOrgFoldersName
            $global:SaveRenameOrgFoldersSheet = Join-Path $CSVSavePath $RenameOrgFoldersName
            $global:SaveDynTempCreateSheet = Join-Path $CSVSavePath $DynTempCreateSheetName
            $global:SaveDynTempChangeSheet = Join-Path $CSVSavePath $DynTempChangeSheetName

            # Update FilePathLabel location based on SheetLabel location
            $FilePathLabel.Location = New-Object System.Drawing.Point(10, ($SheetLabel.Location.Y - 10 - $FilePathLabel.Height))

            # Release Excel resources
            try {
                if ($Excel -ne $null -and $global:Workbook -ne $null) {
                    [System.GC]::Collect()
                    [System.GC]::WaitForPendingFinalizers()
                    $Excel.Quit()
                    $Workbook.Close($false)
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                    $global:Workbook = $null
                    $global:Excel = $null
                }
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl opstod under lukning af Workbook og afslutning af Excel i browse button function: $_"
                Add-Content -Path $logfile -Value $logEntry
            }
            finally {
                if ($global:Workbook -ne $null) {
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                    $global:Workbook = $null
                }
                if ($global:Excel -ne $null) {
                    [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                    $global:Excel = $null
                }
                [System.GC]::Collect()
                [System.GC]::WaitForPendingFinalizers()
            }
            
            # Create Excel resources
            $global:Excel = New-Object -ComObject Excel.Application
            $global:Excel.Visible = $false # Ændres til $true for at vise Excel-arket
            $global:Excel.DisplayAlerts = $false

            $global:Workbook = $global:Excel.Workbooks.Open($TextBox.Text, 0, $true)
            $global:SheetNames = New-Object System.Collections.Generic.List[string]

            foreach ($Sheet in $global:Workbook.Worksheets) {
                if (($Sheet.UsedRange.Rows.Count -gt 1) -and ($Sheet.Name -notlike "*Nuv.*") -and ($Sheet.Name -notlike "*SD*") -and ($Sheet.Cells.Item(2, 1).Value2 -ne $null)) {
                    [void]$global:SheetNames.Add($Sheet.Name)
                }
            }

            # Update rich text box with sheet names from the LOS ark
            $StatusLabel.SelectedText = "Arket $global:FolderName  er indlæst og klar til yderlig håndtering`r`n"
            # Clear $sheetlabel box if it has been loaded previously
            $SheetLabel.Clear()
            # Add sheet names to $sheetlabel box
            $SheetLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
            $SheetLabel.SelectedText = "Faner i LOS arket der indeholder data der skal ændres:`r`n"
            $SheetLabel.SelectedText = ($SheetNames -join "`r`n")
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] LOS ark $global:FolderName indlæste uden fejl"
            # Write the success message to the log file
            Add-Content -Path $logfile -Value $logEntry

            $ExportButton.Visible = $true
            # Set tool tip text for export button
            $ToolTip.SetToolTip($ExportButton, "Eksporter data fra LOS arket til CSV filer")
            $CancelButton.Text = "Annuller"
        }
        else {
            $CancelButton.Text = "Annuller"
        }
    
        # Call the LimitFormSizeAndPosition function to ensure the form stays within screen boundaries
        LimitFormSizeAndPosition
    })

# Continue the export button function
$ExportButton.Add_Click({
        Clear-StatusLabel
        $StatusLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
        $StatusLabel.SelectedText = "Status:`r`n"
        $StatusLabel.SelectedText = "LOS ark indlæses`r`n"
        $StatusLabel.SelectedText = "Arket $global:FolderName er indlæst og klar til yderlig håndtering`r`n"
        $StatusLabel.SelectedText = "Arket $global:FolderName bliver nu behandlet:`r`n"
        # Check if a folder with the name of the LOS file already exists and create one if not
        if (!(Test-Path $global:FolderToCreate -PathType Container)) {
            try {
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDer oprettes en ny folder med navnet: $global:FolderName hvor CSV filerne bliver oprettet`r`n`n"
                New-Item -ItemType Directory -Force -Path $global:FolderToCreate | Out-Null
                New-Item -ItemType Directory -Force -Path $global:CSVSavePath | Out-Null
                New-Item -ItemType Directory -Force -Path $global:PathWhenDone | Out-Null

                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $successText = "[$timestamp] Nye mapper oprettet uden fejl: $global:FolderName."
                Add-Content -Path $logfile -Value $successText
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under oprettelse af mapper:`r`n$_"

                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
        else {
            $Message = "Følgende mappe findes allerede:`n`n"
            $Message += "$($global:FolderName)`n"
            $Message += "`nVil du fortsætte?"
            $DialogResult = [System.Windows.Forms.MessageBox]::Show($Message, "Mappen $global:FolderName eksisterer allerede", [System.Windows.Forms.MessageBoxButtons]::YesNo, [System.Windows.Forms.MessageBoxIcon]::Question)

            if ($DialogResult -eq [System.Windows.Forms.DialogResult]::Yes) {
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nDer findes allerede en folder med navnet $global:FolderName!`r`nScriptet fortsætter, men kontroler at CSV filerner er oprettet korrekt når scriptet er færdigt`r`n`n"
            
                # Add entry to the logfile
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "`r`n-----Start på sletning af CSV filer-----"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            
                # Define an array of CSV file paths
                $csvFiles = @($SaveOrgCreateSheet, $SaveOrgChangeSheet, $SavelederogBrugerFunkChangeSheet1, $SavelederogBrugerFunkChangeSheet2, $SaveSAPAChangeSheet1, $SaveSAPAChangeSheet2, $SaveAcadreCreateSheet, $SaveAcadreChangeSheet, $SaveUserSheet, $SaveRoleOwnerSheet, $SaveDlCreateSheet, $SaveDLChangeSheet, $SaveDlDeleteSheet, $SaveCreateOrgFoldersSheet, $SaveRenameOrgFoldersSheet, $SaveDynTempCreateSheet, $SaveDynTempChangeSheet)

                # Define an array to store failed files
                $failedFiles = @()

                foreach ($csvFile in $csvFiles) {
                    if (Test-Path $csvFile) {
                        $fileName = Split-Path -Leaf $csvFile
                
                        try {
                            # Try to delete the file
                            Remove-Item $csvFile -ErrorAction Stop

                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] Sletning af filen $fileName skete uden fejl."
                            $StatusLabel.SelectionColor = "Orange"
                            $StatusLabel.SelectedText = "$fileName slettet.`r`n"
                            Add-Content -Path $logfile -Value $logEntry
                        }
                        catch {
                            # Failed to delete the file
                            $message = "Filen '$fileName' kan ikke slettes, da den er i brug af en anden proces eller bruger."
                            [System.Windows.Forms.MessageBox]::Show($message, "Kan ikke slette filen $fileName", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning) | Out-Null

                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $errorText = "[$timestamp] Filen $fileName kunne ikke slettes, da den er i brug af en anden proces eller bruger."
                            $statusText = "Filen $fileName kunne ikke slettes, da den er i brug af en anden proces eller bruger`n"
                            $StatusLabel.SelectionColor = "Red"
                            $StatusLabel.SelectedText = $statusText
                            Add-Content -Path $logfile -Value $errorText

                            # Add the failed file to the array
                            $failedFiles += , $csvFile
                        }
                    }
                }

                # Add entry to the logfile
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "-----Slut på sletning af CSV filer-----"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nScriptet blev afbrudt af brugeren, da der allerede findes en folder med navnet $global:FolderName.`r`nIngen nye CSV filer er oprettet!"
                # Add entry to the logfile
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "`r`n[$timestamp] Scriptet blev afbrudt af brugeren, da der allerede findes en folder med navnet $global:FolderName.`r`nIngen nye CSV filer er oprettet!"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
                return
            }
        }

        # Building translate array for use in creating and changing drives later in the script
        $TranslateArr = @(
            @{
                ShortName        = "CF"
                ForvaltningsName = "Centralforvaltningen"
            },
            @{
                ShortName        = "BF"
                ForvaltningsName = "By og Udviklingsforvaltningen"
            },
            @{
                ShortName        = "BUF"
                ForvaltningsName = "Børne- og Uddannelsesforvaltningen"
            },
            @{
                ShortName        = "SSF"
                ForvaltningsName = "Senior-, Sundhed- og Fritidsforvaltningen"
            },
            @{
                ShortName        = "SAF"
                ForvaltningsName = "Social- og Arbejdsmarkedsforvaltningen"
            },
            @{
                ShortName        = "PO"
                ForvaltningsName = "Politisk Organisation"
            }
        ) | ForEach-Object { New-Object psobject -Property $_ }
                
        # Load the WorkSheet for Org Create/Change/Delete
        $orgCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "Org. Opret" }
        $orgChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Org. Ændre" }
        #$orgDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "Org. Slet" }

        # Load the WorkSheet for Drive Create/Change/Delete
        $driveCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "Afd. drev Opret" }
        $driveChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Afd. drev Ændre" }
        #$driveDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "Afd. drev Slet" }

        # Load the WorkSheet for User Change
        #$userChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Brugere Ændre" }

        # Load the WorkSheet for Acadre Create/Change/Delete
        $acadreCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "Acadre Opret" }
        $acadreChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Acadre Ændre" }
        #$acadreDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "Acadre Slet" }

        # Load the WorkSheet for DL Create/Change/Delete
        $dlCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "DL Opret" }
        $dlChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "DL Ændre" }
        #$dlDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "DL Slet" }

        # Load the WorkSheet for Calender Create/Change/Delete
        $calenderCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "Kalender Opret" }
        $calenderChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Kalender Ændre" }
        #$calenderDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "Kalender Slet" }

        # Load the WorkSheet for Mail Create/Change/Delete
        $mailCreateSheet = $WorkBook.Worksheets | where-object { $_.name -like "Mailboks Opret" }
        $mailChangeSheet = $WorkBook.Worksheets | where-object { $_.name -like "Mailboks Ændre" }
        #$mailDeleteSheet = $WorkBook.Worksheets | where-object { $_.name -like "Mailboks Slet" }
                
        # Log entry for start of filehandling
        $successText = "-----Slut på håndtering af filer-----"
        Add-Content -Path $logfile -Value $successText

        ############################################################################################ Starting Create phase ############################################################################################

        $logEntry = "`r`n`r`n-----Start på oprettelse af CSV filer for nyt data-----"
        # Write the success message to the log file
        Add-Content -Path $logfile -Value $logEntry
    
        #### Create a CSV file for Org Create ####

        $orgSheetName = $orgCreateSheet.name
        $exportorgCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgCreateSheet) {
                if ($ws.Cells.Item($i, 3).Value() -ne $null ) {
                    $name = $ws.Cells.Item($i, 3).Value()
                    $orgCreateUnit = $ws.Cells.Item($i, 1).Value()
                    if ($name -eq $null) {
                        $orgType = $null
                    }
                    else {
                        $orgType = 'OrgUnit'
                    }
                    $higherOrg = $ws.Cells.Item($i, 4).Value()
                    #$manager = $ws.Cells.Item($i, 6).Value()
                    #$superUser = $ws.Cells.Item($i, 7).Value()
                    try {
                        $originalAdresse = $ws.Cells.Item($i, 5).Value() -replace "^$", "null"
                        if ($originalAdresse -match ",") {
                            $originalAdresse = ($originalAdresse -split ",", 2)[0]
                        }                                                
                        $adresseInBoth = Compare-Object -ReferenceObject $locationReferenceFile.Name -DifferenceObject $originalAdresse -IncludeEqual | Where-Object { $_.SideIndicator -eq "==" } | Select-Object -ExpandProperty InputObject
                        if ($adresseInBoth -ne $null) {
                            $adresseChangeresults = ForEach ($adresse in $adresseInBoth) {
                                $u = $locationReferenceFile | Where-Object { $_.Name -eq $originalAdresse }
                    
                                New-Object -TypeName psobject -Property @{
                                    "OUID" = $originalAdresse
                                    "ID" = $u.Id
                                }
                            }
                            # Log a message for successful processing
                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] Der blev fundet et Match for $originalAdresse i locationReferenceFile"
                            Add-Content -Path $logfile -Value $logEntry
                        }
                        else {
                            # Log a message for no match found
                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] !!!!! Der blev ikke fundet et match for $originalAdresse i locationReferenceFile !!!!!"
                            Add-Content -Path $logfile -Value $logEntry
                        }
                    }
                    catch {
                        # Log an error message if something went wrong
                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                        $logEntry = "[$timestamp] Der skete en fejl mens der blev lavet sammenligning af adressen $originalAdresse :`r`n$($_.Exception.Message)"
                        Add-Content -Path $logfile -Value $logEntry
                    }
                    if ($name -eq $null) {
                        $Maildomain = $null
                    }
                    else {
                        $Maildomain = 'kolding.dk'
                    }
                    $forvaltning = $ws.Cells.Item($i, 2).Value()
                    $description = $forvaltning + ' ' + $name
                    $admOrg = 'ADM Org'
                    $NRID = $null
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Organisation oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create orgCreate with the required properties
            $orgCreateObj = New-Object System.Object
            $orgCreateObj | Add-Member -Type NoteProperty -Name OUID -Value $orgCreateUnit
            $orgCreateObj | Add-Member -Type NoteProperty -Name Shortname -Value $orgCreateUnit
            $orgCreateObj | Add-Member -Type NoteProperty -Name 'Org description' -Value $description
            $orgCreateObj | Add-Member -Type NoteProperty -Name Name -Value $name
            $orgCreateObj | Add-Member -Type NoteProperty -Name Management -Value $forvaltning
            $orgCreateObj | Add-Member -Type NoteProperty -Name Locations -Value $adresseChangeresults.ID
            $orgCreateObj | Add-Member -Type NoteProperty -Name Maildomain -Value $Maildomain
            $orgCreateObj | Add-Member -Type NoteProperty -Name 'Parent OU' -Value $higherOrg
            $orgCreateObj | Add-Member -Type NoteProperty -Name 'OU type' -Value $orgType
            $orgCreateObj | Add-Member -Type NoteProperty -Name 'Org Placering' -Value $admOrg
            $orgCreateObj | Add-Member -Type NoteProperty -Name NRID -Value $NRID

            # Add $orgCreate object to the export list
            $exportorgCreateList += $orgCreateObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($name -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes nye org enheder. Scriptet fortsætter"
        }
        else {
            try {
                $exportorgCreateList | Export-Csv $global:SaveOrgCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation

                # Clear the export list
                $exportorgCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nOrganisationsdata fra fanen $orgSheetName blev eksporteret til CSV filen: $OrgCreateCSVName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Organisationsdata fra fanen $orgSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af Organisationsdata fra fanen $orgSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
    
        #### End of Create a CSV file for Org Create ####

            
        #### Create CSV file for Dynamic Template folders Create ####
          
        $exportdynCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgCreateSheet) {
                if ($ws.Cells.Item($i, 3).Value() -ne $null ) {
                    $dynCreateOrgName = $ws.Cells.Item($i, 3).Value()
                    $dynCreateOrgunit = $ws.Cells.Item($i, 2).Value() + ' ' + $dynCreateOrgName
                    $dynCreateOrgForvaltningShort = $ws.Cells.Item($i, 2).Value()
                    # Define what Org is selected and translate short name to full name
                    Foreach ($line in $TranslateArr) {
                        if ($line.ShortName -eq $dynCreateOrgForvaltningShort) {
                            $dynCreateOrgForvaltning = $line.ForvaltningsName
                        } #End the if loop
                    }#End the foreach loop
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Dynamic Template oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }#End the else loop
            } #End the foreach loop

            $i++    

            # Create dynTempCreateObj with the required properties
            $dynTempCreateObj = New-Object System.Object
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Organisationsnavn -Value $dynCreateOrgunit
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Afdelingsnavn -Value $dynCreateOrgName
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Forvaltningsnavn -Value $dynCreateOrgForvaltning

            # Add $dynTempCreateObj to the export list
            $exportdynCreateList += $dynTempCreateObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop
        
        # Check if export is needed
        if ($dynCreateOrgunit -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes nye Dynamic Template foldere. Scriptet fortsætter"
        }
        else {
            Try {
                $exportdynCreateList | Export-Csv $SaveDynTempCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
        
                # Clear the export list
                $exportdynCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDynamic Template data fra fanen $orgSheetName blev eksporteret til CSV filen: $DynTempCreateSheetName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Dynamic Template data fra fanen $orgSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af Dynamic Template data fra fanen $orgSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
        
        #### End of Create CSV file for Dynamic Template folders Create ####


        #### Create a CSV file for Drive Create ####
    
        $exportDriveCreateList = @()
        $driveSheetName = $driveCreateSheet.name
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $driveCreateSheet) {
                if ($ws.Cells.Item($i, 1).Value() -ne $null) {
                    $driveCreateShortName = $ws.Cells.Item($i, 1).Value()
                    $driveCreateFullName = $ws.Cells.Item($i, 2).Value()
                    $driveCreateOrg = $ws.Cells.Item($i, 3).Value()
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for G-drev oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create driveCreateObj with the required properties
            $driveCreateObj = New-Object System.Object
            $driveCreateObj | Add-Member -Type NoteProperty -Name Forvaltning -Value $driveCreateShortName
            $driveCreateObj | Add-Member -Type NoteProperty -Name Mappenavn -Value $driveCreateFullName
            $driveCreateObj | Add-Member -Type NoteProperty -Name Organisationsenhed -Value $driveCreateOrg

            # Add $driveCreateObj to the export list
            $exportDriveCreateList += $driveCreateObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($driveCreateShortName -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes nye G-drev. Scriptet fortsætter"
        }
        else {
            Try {
                $exportDriveCreateList | Export-Csv $SaveCreateOrgFoldersSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation

                # Clear the export list
                $exportDriveCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nG-drevsdata fra fanen $driveSheetName blev eksporteret til CSV filen: $CreateOrgFoldersName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] G-drevsdata fra fanen $driveSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af G-drevsdata fra fanen $driveSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Create a CSV file for Drive Create ####


        #### Create a CSV file for Org. DL Create for each new org ####

        $exportDLCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgCreateSheet) {
                if ($ws.Cells.Item($i, 1).Value() -ne $null) {
                    $FirstCellValueDlCreate = $ws.Cells.Item($i, 1).value() #Reads the content of Cell A2 in the Org create sheet. The variable is used to check if a CSV file is needed
                    $DLName = 'DL ' + $ws.Cells.Item($i, 2).value() + ' ' + $ws.Cells.Item($i, 3).value()
                    #Clean up the name of the new DL list
                    $dlCreateCleanname = $DLName -replace '[)#?\/\{(*]', ''
                    $dlCreateCleanname = $dlCreateCleanname -replace ',', ''
                    $dlCreateCleanname = $dlCreateCleanname -replace '_', ''
                    #Set the primary SMTP
                    $dlCreateCleannameSMTP = $dlCreateCleanname
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace '\.', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace '\-', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace ' ', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'æ', 'ae'
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'ø', 'o'
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'å', 'aa'
                    $NewPrimarySMTP = $dlCreateCleannameSMTP + "@kolding.dk"
                    $MemberDepartRestriction = 'Closed'
                    $MemberJoinRestriction = 'Closed'
                    $OrganizationalUnit = 'OU=.gDistributionslister,DC=kolding,DC=dk'
                    $Type = 'Security'
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Org. DL Lister oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++

            # Create DLCreateeObj with the required properties
            $DlCreateeObj = New-Object System.Object
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Name -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Alias -Value $dlCreateCleannameSMTP
            $DlCreateeObj | Add-Member -Type NoteProperty -Name DisplayName -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name PrimarySmtpAddress -Value $NewPrimarySMTP
            $DlCreateeObj | Add-Member -Type NoteProperty -Name MemberDepartRestriction -Value $MemberDepartRestriction
            $DlCreateeObj | Add-Member -Type NoteProperty -Name MemberJoinRestriction -Value $MemberJoinRestriction
            $DlCreateeObj | Add-Member -Type NoteProperty -Name OrganizationalUnit -Value $OrganizationalUnit
            $DlCreateeObj | Add-Member -Type NoteProperty -Name SamAccountName -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Type -Value $Type

            # Add $DlCreateeObj to the export list
            $exportDLCreateList += $DlCreateeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($FirstCellValueDlCreate -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes Org. DL Lister. Scriptet fortsætter"
        }
        else {
            Try {
                $exportDLCreateList | Export-Csv $SaveDlCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                # Clear the export list
                $exportDLCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDL lister fra fanen $orgSheetName blev eksporteret til CSV filen: $dlCreateSaveName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] DL lister fra fanen $orgSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af DL lister fra fanen $orgSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of CSV file for Org. DL Create for each new org ####

        #### Create a CSV file for Acadre Create ####

        $acadreCreateSheetName = $acadreCreateSheet.name
        $exportAcadreCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $acadreCreateSheet) {
                if ($ws.Cells.Item($i, 1).Value() -ne $null ) {
                    $Acadrename = $ws.Cells.Item($i, 1).Value()
                    # Tjek om længden er større end 30
                    if ($Acadrename.Length -gt 30) {
                        $Acadrename = $Acadrename.Substring(0, 30)
                    }
                    $AcadreDesc = $ws.Cells.Item($i, 1).Value()
                    $AcadreCreateParentUnit = $ws.Cells.Item($i, 2).Value()
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Acadre oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create acadreCreate with the required properties
            $acadreCreateObj = New-Object System.Object
            $acadreCreateObj | Add-Member -Type NoteProperty -Name Navn -Value $Acadrename
            $acadreCreateObj | Add-Member -Type NoteProperty -Name Beskrivelse -Value $AcadreDesc
            $acadreCreateObj | Add-Member -Type NoteProperty -Name 'Overliggende enhed' -Value $AcadreCreateParentUnit

            # Add $acadreCreate object to the export list
            $exportAcadreCreateList += $acadreCreateObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($Acadrename -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes nye Acadre enheder. Scriptet fortsætter"
        }
        else {
            try {
                $exportAcadreCreateList | Export-Csv $global:SaveAcadreCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation

                # Clear the export list
                $exportAcadreCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nAcadre data fra fanen $acadreCreateSheetName blev eksporteret til CSV filen: $AcadreCreateCSVName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Acadredata fra fanen $acadreCreateSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af Acadredata fra fanen $acadreCreateSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
    
        #### End of Create a CSV file for Acadre Create ####

            
        #### Create CSV file for Dynamic Template folders Create ####
          
        $exportdynCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgCreateSheet) {
                if ($ws.Cells.Item($i, 3).Value() -ne $null ) {
                    $dynCreateOrgName = $ws.Cells.Item($i, 3).Value()
                    $dynCreateOrgunit = $ws.Cells.Item($i, 2).Value() + ' ' + $dynCreateOrgName
                    $dynCreateOrgForvaltningShort = $ws.Cells.Item($i, 2).Value()
                    # Define what Org is selected and translate short name to full name
                    Foreach ($line in $TranslateArr) {
                        if ($line.ShortName -eq $dynCreateOrgForvaltningShort) {
                            $dynCreateOrgForvaltning = $line.ForvaltningsName
                        } #End the if loop
                    }#End the foreach loop
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Dynamic Template oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }#End the else loop
            } #End the foreach loop

            $i++    

            # Create dynTempCreateObj with the required properties
            $dynTempCreateObj = New-Object System.Object
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Organisationsnavn -Value $dynCreateOrgunit
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Afdelingsnavn -Value $dynCreateOrgName
            $dynTempCreateObj | Add-Member -Type NoteProperty -Name Forvaltningsnavn -Value $dynCreateOrgForvaltning

            # Add $dynTempCreateObj to the export list
            $exportdynCreateList += $dynTempCreateObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop
        
        # Check if export is needed
        if ($dynCreateOrgunit -eq $null) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes nye Dynamic Template foldere. Scriptet fortsætter"
        }
        else {
            Try {
                $exportdynCreateList | Export-Csv $SaveDynTempCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
        
                # Clear the export list
                $exportdynCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDynamic Template data fra fanen $orgSheetName blev eksporteret til CSV filen: $DynTempCreateSheetName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Dynamic Template data fra fanen $orgSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af Dynamic Template data fra fanen $orgSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
        
        #### End of Create CSV file for Dynamic Template folders Create ####


        #### Continue Funk. DL Create from DL Create Sheet ####
    
        $dlSheetName = $dlCreateSheet.name
        $exportFunkDLCreateList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $dlCreateSheet) {
                if ($ws.Cells.Item($i, 1).value() -ne $null) {
                    $FirstCellValueFunkDlCreate = $ws.Cells.Item($i, 1).value() #Reads the content of Cell A2 in the Org create sheet. The variable is used to check if a CSV file is needed
                    $DLName = $ws.Cells.Item($i, 1).value()
                    #Clean up the name of the new DL list
                    $dlCreateCleanname = $DLName -replace '[)#?\/\{(*]', ''
                    $dlCreateCleanname = $dlCreateCleanname -replace ',', ''
                    $dlCreateCleanname = $dlCreateCleanname -replace '_', ''
                    #Set the primary SMTP
                    $dlCreateCleannameSMTP = $dlCreateCleanname
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace '\.', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace '\-', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace ' ', ''
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'æ', 'ae'
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'ø', 'o'
                    $dlCreateCleannameSMTP = $dlCreateCleannameSMTP -replace 'å', 'aa'
                    $NewPrimarySMTP = $dlCreateCleannameSMTP + "@kolding.dk"
                    $MemberDepartRestriction = 'Closed'
                    $MemberJoinRestriction = 'Closed'
                    $OrganizationalUnit = 'OU=.gDistributionslister,DC=kolding,DC=dk'
                    $Type = 'Security'
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for funk DL Lister oprette"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++

            # Create DLCreateeObj with the required properties
            $DlCreateeObj = New-Object System.Object
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Name -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Alias -Value $dlCreateCleannameSMTP
            $DlCreateeObj | Add-Member -Type NoteProperty -Name DisplayName -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name PrimarySmtpAddress -Value $NewPrimarySMTP
            $DlCreateeObj | Add-Member -Type NoteProperty -Name MemberDepartRestriction -Value $MemberDepartRestriction
            $DlCreateeObj | Add-Member -Type NoteProperty -Name MemberJoinRestriction -Value $MemberJoinRestriction
            $DlCreateeObj | Add-Member -Type NoteProperty -Name OrganizationalUnit -Value $OrganizationalUnit
            $DlCreateeObj | Add-Member -Type NoteProperty -Name SamAccountName -Value $dlCreateCleanname
            $DlCreateeObj | Add-Member -Type NoteProperty -Name Type -Value $Type

            # Add $DlCreateeObj to the export list
            $exportFunkDLCreateList += $DlCreateeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($FirstCellValueFunkDlCreate -eq $null ) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke oprettes Funk. DL Lister. Scriptet fortsætter"
        }
        else {
            Try {
                $exportFunkDLCreateList | Export-Csv $SaveDlCreateSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportFunkDLCreateList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDL lister fra fanen $dlSheetName blev eksporteret og tilføjet til CSV filen: $dlCreateSaveName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] DL lister fra fanen $dlSheetName blev eksporteret korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            catch {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Fejl under eksport af DL lister fra fanen $dlSheetName :`r`n$_"
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Funk. DL Create from DL Create Sheet ####

        $logEntry = "-----Afslutning af oprettelse af CSV filer for nyt data-----"
        # Write the success message to the log file
        Add-Content -Path $logfile -Value $logEntry


        ############################################################################################ End of Create phase - Starting Change phase ############################################################################################


        $logEntry = "`r`n`r`n-----Start på oprettelse af CSV filer for ændring af data-----"
        # Write the success message to the log file
        Add-Content -Path $logfile -Value $logEntry


        #### Create a CSV file for Org Change ####
        $exportOrgChangeList = @()
        $orgChangeSheetName = $orgChangeSheet.name
        # Imports used in this section of the script

        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($ws.Cells.Item($i, 1).value() -ne $null) {
                    #$orgChangeExport = $ws.Cells.Item($i, 1).value()
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $orgChangeName = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $orgChangeName = $ws.Cells.Item($i, 3).Value()
                    }
                    else {
                        $orgChangeName = $null
                    }# This section looks for a value in the "Navn" coloumn in the LOS ark and if there is a value in the "Nyt Navn" coloumn it will use that, otherwise it will use the value from the "Navn" coloumn

                    if ($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -ne $null) {
                        $orgChangeUnit = $ws.Cells.Item($i, 9).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $orgChangeUnit = $ws.Cells.Item($i, 1).Value()
                    }
                    else {
                        $orgChangeUnit = $null
                    }# This section looks for a value in the "Kort navn" coloumn in the LOS ark and if there is a value in the "Nyt kortnavn" coloumn it will use that, otherwise it will use the value from the "Kort navn" coloumn

                    try {
                        $orginalChangeUnit = $ws.Cells.Item($i, 1).Value() -replace "^$", "null"
                        $ouidInBoth = Compare-Object -ReferenceObject $orgReferenceFile.OUID -DifferenceObject $orginalChangeUnit -IncludeEqual | Where-Object { $_.SideIndicator -eq "==" } | Select-Object -ExpandProperty InputObject
                        if ($ouidInBoth -ne $null) {
                            $Changeresults = ForEach ($ouid in $ouidInBoth) {
                                $u = $orgReferenceFile | Where-Object { $_.OUID -eq $ouid }
                    
                                New-Object -TypeName psobject -Property @{
                                    "OUID" = $ouid
                                    "NRID" = $u.NRID
                                }
                            }
                            # Log a message for successful processing
                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] Der blev fundet et Match for $orginalChangeUnit i orgReferenceFile"
                            Add-Content -Path $logfile -Value $logEntry
                        }
                        else {
                            # Log a message for no match found
                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] !!!!! Der blev ikke fundet et match for $orginalChangeUnit i orgReferenceFile !!!!!"
                            Add-Content -Path $logfile -Value $logEntry
                        }
                    }
                    catch {
                        # Log an error message if something went wrong
                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                        $logEntry = "[$timestamp] Der skete en fejl mens der blev lavet sammenligning af OUID $orginalChangeUnit :`r`n$($_.Exception.Message)"
                        Add-Content -Path $logfile -Value $logEntry
                    }
                    
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $orgChangeNumber = $Changeresults.NRID
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $orgChangeNumber = $Changeresults.NRID
                    }
                    else {
                        $orgChangeNumber = $null
                    }# This section will set the NRID in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $orgChangeForvaltning = $ws.Cells.Item($i, 10).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $orgChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $orgChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $orgChangeForvaltning = $null
                    }# This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn

                    if ($ws.Cells.Item($i, 4).Value() -ne $null -and $ws.Cells.Item($i, 12).Value() -ne $null) {
                        $orgChangeHigherOrg = $ws.Cells.Item($i, 12).Value()
                    }
                    elseif (($ws.Cells.Item($i, 4).Value() -ne $null -and $ws.Cells.Item($i, 12).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $orgChangeHigherOrg = ($ws.Cells.Item($i, 4).Value() | Select-String '(?<=\[)[^]]+(?=\])' -AllMatches).Matches.Value
                    }
                    elseif (($ws.Cells.Item($i, 4).Value() -ne $null -and $ws.Cells.Item($i, 12).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $orgChangeHigherOrg = ($ws.Cells.Item($i, 4).Value() | Select-String '(?<=\[)[^]]+(?=\])' -AllMatches).Matches.Value
                    }
                    else {
                        $orgChangeHigherOrg = $null
                    }# This section looks for a value in the "Overordnet enhed" coloumn in the LOS ark and if there is a value in the "Ny Overordnet enhed" coloumn it will use that, otherwise it will use the value from the "Overordnet enhed" coloumn
                    $orgChangeDescription = $orgChangeForvaltning + ' ' + $orgChangeName
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Organisation ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create orgChangeObj with the required properties
            $orgChangeeObj = New-Object System.Object
            $orgChangeeObj | Add-Member -Type NoteProperty -Name NRID -Value $orgChangeNumber
            $orgChangeeObj | Add-Member -Type NoteProperty -Name OUID -Value $orgChangeUnit
            $orgChangeeObj | Add-Member -Type NoteProperty -Name Shortname -Value $orgChangeUnit
            $orgChangeeObj | Add-Member -Type NoteProperty -Name 'Org description' -Value $orgChangeDescription
            $orgChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $orgChangeName
            $orgChangeeObj | Add-Member -Type NoteProperty -Name Management -Value $orgChangeForvaltning
            $orgChangeeObj | Add-Member -Type NoteProperty -Name 'Parent OU' -Value $orgChangeHigherOrg

            # Add $orgChangeObj to the export list
            $exportorgChangeList += $orgChangeeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportorgChangeList | Where-Object { $_.NRID -ne $null -or $_.OUID -ne $null -or $_.ShortName -ne $null -or $_.'Org description' -ne $null -or $_.Name -ne $null -or $_.Management -ne $null -or $_.'Parent OU' -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres org enheder. Scriptet fortsætter"
        }
        else {
            $exportorgChangeList = $exportorgChangeList  | Where-Object 'Org description' -NE " "
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveOrgChangeSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $OrgChangeCSVName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $OrgChangeCSVName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation
                $exportorgChangeList | Export-Csv $SaveOrgChangeSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportorgChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nOrganisationsdata fra fanen $orgChangeSheetName blev eksporteret og tilføjet til CSV filen: $OrgChangeCSVName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $OrgChangeCSVName blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Create a CSV file for Org Change ####


        #### Create a CSV file for Org. DL Change file####

        $exportorgChangeDLList = @()
        $i = 2
        
        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($orgChangeSheet.Cells.Item($i, 10).value() -ne $null -or $orgChangeSheet.Cells.Item($i, 11).value() -ne $null) {
                    $DLOldName = 'DL ' + $orgChangeSheet.Cells.Item($i, 2).value() + ' ' + $orgChangeSheet.Cells.Item($i, 3).value()
                    
                    if ($orgChangeSheet.Cells.Item($i, 10).value() -ne $null -and $orgChangeSheet.Cells.Item($i, 11).value() -ne $null) {
                        $DLNewName = 'DL ' + $orgChangeSheet.Cells.Item($i, 10).value() + ' ' + $orgChangeSheet.Cells.Item($i, 11).value()
                    }
                    elseif ($orgChangeSheet.Cells.Item($i, 10).value() -ne $null -and $orgChangeSheet.Cells.Item($i, 11).value() -eq $null) {
                        $DLNewName = 'DL ' + $orgChangeSheet.Cells.Item($i, 10).value() + ' ' + $orgChangeSheet.Cells.Item($i, 3).value()
                    }
                    elseif ($orgChangeSheet.Cells.Item($i, 10).value() -eq $null -and $orgChangeSheet.Cells.Item($i, 11).value() -ne $null) {
                        $DLNewName = 'DL ' + $orgChangeSheet.Cells.Item($i, 2).value() + ' ' + $orgChangeSheet.Cells.Item($i, 11).value()
                    }
        
                    # Create orgDLChangeObj with the required properties
                    $orgDLChangeObj = New-Object System.Object
                    $orgDLChangeObj | Add-Member -Type NoteProperty -Name Navn -Value $DLOldName
                    $orgDLChangeObj | Add-Member -Type NoteProperty -Name 'Nyt navn' -Value $DLNewName
        
                    # Add $lederFunkChangeObj to the export list
                    $exportorgChangeDLList += $orgDLChangeObj
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Org DL. ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop
        
            $i++    
        
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportorgChangeDLList | Where-Object { $_.Navn -ne $null -or $_.'Nyt navn' -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres organisatoriske DL lister. Scriptet fortsætter"
        }
        else {
            $filteredExportList = $exportorgChangeDLList | Where-Object { $_.'Nyt navn' -ne $null }
            if ($filteredExportList -ne $null) {            
                # Check if the new file name matches any file in the failedFiles array
                if ($failedFiles -contains $SaveDLChangeSheet) {
                    # File name matches a failed file, skip creation
                    $StatusLabel.SelectionColor = "Red"
                    $StatusLabel.SelectedText = "`nFilen $dlChangeSaveName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Filen $dlChangeSaveName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                    # Write the error to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
                else {
                    # File name does not match any failed file, proceed with creation    
                    $filteredExportList | Export-Csv $SaveDLChangeSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                    $exportorgChangeDLList = @()
                    $StatusLabel.SelectionColor = "Green"
                    $StatusLabel.SelectedText = "`nOrganisatoriske DL-listedata fra fanen $orgChangeSheetName blev eksporteret til CSV-filen: $dlChangeSaveName"
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Filen $dlChangeSaveName blev oprettet korrekt"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry

                }
            }
        }
        #### End of Create a CSV file for Org. DL list Change file####


        #### Create a CSV file for Lederfunktion Change file 1####

        $exportlederFunk1ChangeList = @()
        $i = 2
        $lederFunkDesc = "Manager af "

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($ws.Cells.Item($i, 1).value() -ne $null) {
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $lederFunk1Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $lederFunk1Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $lederFunk1Name = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $lederFunk1NewName = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $lederFunk1NewName = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $lederFunk1NewName = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -ne $null) {
                        $lederFunk1ShortName = $ws.Cells.Item($i, 9).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $lederFunk1ShortName = $ws.Cells.Item($i, 1).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -eq $null)) {
                        $lederFunk1ShortName = $null
                    }# This section will set the ResourceID in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $lederFunk1ChangeForvaltning = $ws.Cells.Item($i, 10).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $lederFunk1ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $lederFunk1ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $lederFunk1ChangeForvaltning = $null
                    }# This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn

                    $lederFunk1FullName = "Lederfunktion - " + $lederFunk1ChangeForvaltning + ' ' + $lederFunk1Name
                    $lederfunk1FullDesc = $lederFunkDesc + $lederFunk1ChangeForvaltning + ' ' + $lederFunk1NewName

                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i første variabel for Lederfunktion ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create lederFunkChangeObj with the required properties
            $lederFunk1ChangeeObj = New-Object System.Object
            $lederFunk1ChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $lederFunk1FullName
            $lederFunk1ChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $lederFunk1ShortName
            $lederFunk1ChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $lederfunk1FullDesc

            # Add $lederFunkChangeObj to the export list
            $exportlederFunk1ChangeList += $lederFunk1ChangeeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportlederFunk1ChangeList | Where-Object { $_.Description -ne $null -or $_.Name -ne $null -or $_.ResourceID -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres første del af Lederfunktioner. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SavelederogBrugerFunkChangeSheet1) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $LederFunkChangeSheet1Name blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet1Name blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportlederFunk1ChangeList = $exportlederFunk1ChangeList  | Where-Object ResourceID -NE $null
                $exportlederFunk1ChangeList | Export-Csv $SavelederogBrugerFunkChangeSheet1 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportlederFunk1ChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nFørste del af Lederfunktionsdata fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $LederFunkChangeSheet1Name"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet1Name blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry

            }
        }

        #### End of Create a CSV file for Lederfunktion Change file 1####


        #### Continue CSV file for Brugeransvarlig Change File 1####

        $exportBrugerAns1ChangeList = @()
        $BrugerAnsDesc = "Superuser af "
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($ws.Cells.Item($i, 1).value() -ne $null) {
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $brugerAns1Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $brugerAns1Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $brugerAns1Name = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $brugerAns1NewName = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $brugerAns1NewName = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $brugerAns1NewName = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -ne $null) {
                        $brugerAns1ShortName = $ws.Cells.Item($i, 9).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $brugerAns1ShortName = $ws.Cells.Item($i, 1).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -eq $null)) {
                        $brugerAns1ShortName = $null
                    }# This section will set the ResourceID in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $brugerAns1ChangeForvaltning = $ws.Cells.Item($i, 10).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $brugerAns1ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $brugerAns1ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $brugerAns1ChangeForvaltning = $null
                    }# This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn

                    $brugerAns1FullName = "Brugeransvarlig - " + $brugerAns1ChangeForvaltning + ' ' + $brugerAns1Name
                    $brugerAns1FullDesc = $BrugerAnsDesc + $brugerAns1ChangeForvaltning + ' ' + $brugerAns1NewName

                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i første variabel for Brugeransvarlig ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create brugerAnsChangeObj with the required properties
            $brugerAns1ChangeeObj = New-Object System.Object
            $brugerAns1ChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $brugerAns1FullName
            $brugerAns1ChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $brugerAns1ShortName
            $brugerAns1ChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $brugerAns1FullDesc

            # Add $brugerAnsChangeObj to the export list
            $exportbrugerAns1ChangeList += $brugerAns1ChangeeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportbrugerAns1ChangeList | Where-Object { $_.Description -ne $null -or $_.Name -ne $null -or $_.ResourceID -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres første del af Brugeransvarlig. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SavelederogBrugerFunkChangeSheet1) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $LederFunkChangeSheet1Name har ikke opdateret Brugeransvalig data, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet1Name har ikke opdateret Brugeransvalig data, da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportbrugerAns1ChangeList = $exportbrugerAns1ChangeList  | Where-Object ResourceID -NE $null
                $exportbrugerAns1ChangeList | Export-Csv $SavelederogBrugerFunkChangeSheet1 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportbrugerAns1ChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nFørste del af Brugeransvarligdata fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $LederFunkChangeSheet1Name"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet1Name blev korrekt opdateret med Brugeransvarlig data"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry

            }
        }

        #### End of creating CSV file for Brugeransvarlig Change File 1####
        

        #### Create a CSV file for Lederfunktion Change File 2####
        $exportlederFunk2ChangeList = @()
        $lederFunkDesc = "Manager af "
        $lederFunkName = "Lederfunktion - "
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($ws.Cells.Item($i, 1).Value() -ne $null ) {
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $lederFunk2Name = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $lederFunk2Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $lederFunk2Name = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -ne $null) {
                        $lederFunk2ShortName = $ws.Cells.Item($i, 9).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $lederFunk2ShortName = $ws.Cells.Item($i, 1).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -eq $null)) {
                        $lederFunk2ShortName = $null
                    }# This section will set the ResourceID in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $lederFunk2ChangeForvaltning = $ws.Cells.Item($i, 10).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $lederFunk2ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $lederFunk2ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $lederFunk2ChangeForvaltning = $null
                    }# This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn

                    $lederFunk2FullName = $lederFunkName + $lederFunk2ChangeForvaltning + ' ' + $lederFunk2Name
                    $lederFunk2Description = $lederFunkDesc + $lederFunk2ChangeForvaltning + ' ' + $lederFunk2Name

                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i anden variabel for Lederfunktion ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create lederFunk2ChangeObj with the required properties
            $lederFunk2ChangeObj = New-Object System.Object
            $lederFunk2ChangeObj | Add-Member -Type NoteProperty -Name Description -Value $lederFunk2Description
            $lederFunk2ChangeObj | Add-Member -Type NoteProperty -Name Name -Value $lederFunk2FullName
            $lederFunk2ChangeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $lederFunk2ShortName

            # Add $lederFunk2ChangeObj to the export list
            $exportlederFunk2ChangeList += $lederFunk2ChangeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportlederFunk2ChangeList | Where-Object { $_.Description -ne $null -or $_.Name -ne $null -or $_.ResourceID -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres anden del af Lederfunktioner. Scriptet fortsætter"
        }
        else {
            $exportlederFunk2ChangeList = $exportlederFunk2ChangeList | Where-Object ResourceID -ne $null
            $exportlederFunk2ChangeList = $exportlederFunk2ChangeList | Select-Object -Property Description, Name
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SavelederogBrugerFunkChangeSheet2) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $LederFunkChangeSheet2Name blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet2Name blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportlederFunk2ChangeList | Export-Csv $SavelederogBrugerFunkChangeSheet2 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportlederFunk2ChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nAnden del af Lederfunktionsdata fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $LederFunkChangeSheet2Name"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet2Name blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Create a CSV file for Lederfunktion Change File 2####


        #### Continue CSV file for Brugeransvarlig Change File 2####
        $exportBrugerAns2ChangeList = @()
        $BrugerAnsDesc = "Superuser af "
        $BrugerAnsName = "Brugeransvarlig - "
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if ($ws.Cells.Item($i, 1).Value() -ne $null ) {
                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $brugerAns2Name = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $brugerAns2Name = $ws.Cells.Item($i, 3).Value()
                    }
                    elseif (($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -eq $null)) {
                        $brugerAns2Name = $null
                    }# This section will set the Name value in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -ne $null) {
                        $brugerAns2ShortName = $ws.Cells.Item($i, 9).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $brugerAns2ShortName = $ws.Cells.Item($i, 1).Value()
                    }
                    elseif (($ws.Cells.Item($i, 1).Value() -ne $null -and $ws.Cells.Item($i, 9).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -eq $null)) {
                        $brugerAns2ShortName = $null
                    }# This section will set the ResourceID in the CSV file based on if there is value in coloumn "Nyt kortnavn" or coloumn "Nyt Navn" in the LOS ark

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $brugerAns2ChangeForvaltning = $ws.Cells.Item($i, 10).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null)) {
                        $brugerAns2ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    elseif (($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 9).Value() -ne $null)) {
                        $brugerAns2ChangeForvaltning = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $brugerAns2ChangeForvaltning = $null
                    }# This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn

                    $brugerAns2FullName = $BrugerAnsName + $brugerAns2ChangeForvaltning + ' ' + $brugerAns2Name
                    $brugerAns2Description = $BrugerAnsDesc + $brugerAns2ChangeForvaltning + ' ' + $brugerAns2Name

                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i anden variabel for Brugeransvarlig ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create brugerAnsChangeObj with the required properties
            $brugerAns2ChangeeObj = New-Object System.Object
            $brugerAns2ChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $brugerAns2Description
            $brugerAns2ChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $brugerAns2FullName
            $brugerAns2ChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $brugerAns2ShortName

            # Add $brugerAnsChangeObj to the export list
            $exportbrugerAns2ChangeList += $brugerAns2ChangeeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportbrugerAns2ChangeList | Where-Object { $_.Description -ne $null -or $_.Name -ne $null -or $_.ResourceID -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres anden del af Brugeransvarlig. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SavelederogBrugerFunkChangeSheet2) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $LederFunkChangeSheet2Name har ikke opdateret Brugeransvalig data, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet2Name har ikke opdateret Brugeransvalig data, da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportbrugerAns2ChangeList = $exportbrugerAns2ChangeList | Where-Object ResourceID -ne $null
                $exportbrugerAns2ChangeList = $exportbrugerAns2ChangeList | Select-Object -Property Description, Name
                $exportbrugerAns2ChangeList | Export-Csv $SavelederogBrugerFunkChangeSheet2 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportbrugerAns2ChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nAnden del af Brugeransvarligdata fra fanen $orgChangeSheetName blev eksporteret og tilføjet til CSV filen: $LederFunkChangeSheet2Name"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet2Name blev korrekt opdateret med Brugeransvarlig data"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Brugeransvarlig Change File 2####

        #### Create a CSV file for SAPA Change files####
        $exportSAPA1ChangeList = @()
        $exportSAPA2ChangeList = @()
        $SAPAChangeList = @()
        $i = 2
        $SAPAlederStartTxt = "JFR SAPA LEDER LÆSE - "
        $SAPAsagStartTxt = "JFR SAPA SAGSBEHANDLER LÆSE - "
        $SAPAlederStartDesc = "Jobfunktionsrolle til SAPA Leder Læse - "
        $SAPAsagStartDesc = "Jobfunktionsrolle til SAPA Sagsbehandler Læse - "
                    
        # Load information from the worksheet
        Do {
            # Initialiser midlertidig liste
            foreach ($ws in $orgChangeSheet) {
                $oldSAPAShortname = $ws.Cells.Item($i, 1).Value()
                $oldSAPALongname = $ws.Cells.Item($i, 3).Value()
                $oldSAPALederFullName = $SAPAlederStartTxt + $oldSAPAShortname + " " + $oldSAPALongname
                $oldSAPASagFullName = $SAPAsagStartTxt + $oldSAPAShortname + " " + $oldSAPALongname
                $resourceIDSAPANewShortName = $null
                $resourceIDSAPANewLongName = $null
                $resourceIDSAPALederNewFullName = $null
                $resourceIDSAPASagNewFullName = $null
                $descriptionSAPALederNew = $null
                $descriptionSAPASagNew = $null
                
                try {
                    if (($ws.Cells.Item($i, 1).Value() -ne $null) -and ($ws.Cells.Item($i, 9).Value() -ne $null) -and ($ws.Cells.Item($i, 11).Value() -eq $null)) {
                        $resourceIDSAPANewShortName = $ws.Cells.Item($i, 9).Value()
                        $resourceIDSAPALederNewFullName = $SAPAlederStartTxt + $resourceIDSAPANewShortName + " " + $oldSAPALongname
                        $resourceIDSAPASagNewFullName = $SAPAsagStartTxt + $resourceIDSAPANewShortName + " " + $oldSAPALongname
                        $descriptionSAPALederNew = $SAPAlederStartDesc + $resourceIDSAPANewShortName + " " + $oldSAPALongname
                        $descriptionSAPASagNew = $SAPAsagStartDesc + $resourceIDSAPANewShortName + " " + $oldSAPALongname
                
                        # Opret SAPAlederChangeeObj med de nødvendige egenskaber
                        $SAPAlederChangeeObj = New-Object PSCustomObject
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPALederFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPALederNewFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPALederNew

                        # Opret SAPAsagChangeeObj med de nødvendige egenskaber
                        $SAPAsagChangeeObj = New-Object PSCustomObject
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPASagFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPASagNewFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPASagNew
        
                        # Tilføj objektet til den midlertidige liste
                        $SAPAChangeList += $SAPAlederChangeeObj
                        $SAPAChangeList += $SAPAsagChangeeObj
                    }
                }
                catch{
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Fejl under behandling af række $i :`r`n$_"
                    # Write the error to the log file
                    Add-Content -Path $logfile -Value $logEntry

                    # Fortsæt behandlingen af de næste rækker
                    continue
                }
                
                try {
                    if (($ws.Cells.Item($i, 1).Value() -ne $null) -and ($ws.Cells.Item($i, 11).Value() -ne $null) -and ($ws.Cells.Item($i, 9).Value() -eq $null)){
                        $resourceIDSAPANewLongName = $ws.Cells.Item($i, 11).Value()
                        $resourceIDSAPALederNewFullName = $SAPAlederStartTxt + $oldSAPAShortname + " " + $resourceIDSAPANewLongName
                        $resourceIDSAPASagNewFullName = $SAPAsagStartTxt + $oldSAPAShortname + " " + $resourceIDSAPANewLongName
                        $descriptionSAPALederNew = $SAPAlederStartDesc + $oldSAPAShortname + " " + $resourceIDSAPANewLongName
                        $descriptionSAPASagNew = $SAPAsagStartDesc + $oldSAPAShortname + " " + $resourceIDSAPANewLongName
    
                        # Opret SAPAlederChangeeObj med de nødvendige egenskaber
                        $SAPAlederChangeeObj = New-Object PSCustomObject
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPALederFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPALederNewFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPALederNew
            
                        # Opret SAPAsagChangeeObj med de nødvendige egenskaber
                        $SAPAsagChangeeObj = New-Object PSCustomObject
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPASagFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPASagNewFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPASagNew
                    
                        # Tilføj objektet til den midlertidige liste
                        $SAPAChangeList += $SAPAlederChangeeObj
                        $SAPAChangeList += $SAPAsagChangeeObj
                    }            
                }
                catch {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Fejl under behandling af række $i :`r`n$_"
                    # Write the error to the log file
                    Add-Content -Path $logfile -Value $logEntry

                    # Fortsæt behandlingen af de næste rækker
                    continue
                }
                try {
                    if (($ws.Cells.Item($i, 1).Value() -ne $null) -and ($ws.Cells.Item($i, 9).Value() -ne $null) -and ($ws.Cells.Item($i, 11).Value() -ne $null)){
                        $resourceIDSAPANewShortName = $ws.Cells.Item($i, 9).Value()
                        $resourceIDSAPANewLongName = $ws.Cells.Item($i, 11).Value()
                        $resourceIDSAPALederNewFullName = $SAPAlederStartTxt + $resourceIDSAPANewShortName + " " + $resourceIDSAPANewLongName
                        $resourceIDSAPASagNewFullName = $SAPAsagStartTxt + $resourceIDSAPANewShortName + " " + $resourceIDSAPANewLongName
                        $descriptionSAPALederNew = $SAPAlederStartDesc + $resourceIDSAPANewShortName + " " + $resourceIDSAPANewLongName
                        $descriptionSAPASagNew = $SAPAsagStartDesc + $resourceIDSAPANewShortName + " " + $resourceIDSAPANewLongName
    
                        # Opret SAPAlederChangeeObj med de nødvendige egenskaber
                        $SAPAlederChangeeObj = New-Object PSCustomObject
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPALederFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPALederNewFullName
                        $SAPAlederChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPALederNew
            
                        # Opret SAPAsagChangeeObj med de nødvendige egenskaber
                        $SAPAsagChangeeObj = New-Object PSCustomObject
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Name -Value $oldSAPASagFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name ResourceID -Value $resourceIDSAPASagNewFullName
                        $SAPAsagChangeeObj | Add-Member -Type NoteProperty -Name Description -Value $descriptionSAPASagNew
                    
                        # Tilføj objektet til den midlertidige liste
                        $SAPAChangeList += $SAPAlederChangeeObj
                        $SAPAChangeList += $SAPAsagChangeeObj
                    }        
                }
                catch {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Fejl under behandling af række $i :`r`n$_"
                    # Write the error to the log file
                    Add-Content -Path $logfile -Value $logEntry

                    # Fortsæt behandlingen af de næste rækker
                    continue
                }
            } # End foreach loop

            $i++
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) # End the Do loop                    
                    
        # Check if export is needed
        $hasValues = $SAPAChangeList | Where-Object { $_.Description -ne $null -or $_.Name -ne $null -or $_.ResourceID -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres første del af SAPA roller. Scriptet fortsætter"
        }
        else {
            # Check if the new file names matches any file in the failedFiles array
            $SAPAFiles = $SaveSAPAChangeSheet1, $SaveSAPAChangeSheet2
            # File name matches a failed file, skip creation
            if ($failedFiles -contains $SAPAFiles) {
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilerne $SAPAChangeSheet1Name og $SAPAChangeSheet2Name blev ikke oprettet, da de tidligere versioner af filerne ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filerne $SAPAChangeSheet1Name og $SAPAChangeSheet2Name blev ikke oprettet, da de tidligere versioner af filerne ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # Check if there is an existing SAPA role to change
                $SAPAInBoth = Compare-Object -ReferenceObject $SAPASystem."Resource ID" -DifferenceObject $SAPAChangeList.Name -IncludeEqual | Where-Object { $_.SideIndicator -eq "==" } | Select-Object -ExpandProperty InputObject

                if ($SAPAInBoth -ne $null) {
                    ForEach ($SAPARole in $SAPAInBoth) {
                        $MatchingObject = $SAPAChangeList | Where-Object { $_.Name -eq $SAPARole }
                        if ($MatchingObject -ne $null) {
                            $exportSAPA1ChangeList += $MatchingObject
                            $exportSAPA2ChangeList += $MatchingObject
                        }
                        # Log a message for successful processing
                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                        $logEntry = "[$timestamp] Der blev fundet et Match for $MatchingObject i SAPAReferenceFile"
                        Add-Content -Path $logfile -Value $logEntry
                    }
                    # Export the first file for changing SAPA roles
                    $exportSAPA1ChangeList = $exportSAPA1ChangeList  | Where-Object ResourceID -NE $null
                    $exportSAPA1ChangeList | Export-Csv $SaveSAPAChangeSheet1 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                    $exportSAPA1ChangeList = @()
                    # Export the second file for changing SAPA roles
                    $exportSAPA2ChangeList = $exportSAPA2ChangeList  | Where-Object ResourceID -NE $null
                    $exportSAPA2ChangeList = $exportSAPA2ChangeList  | Select-Object Description, @{Name='Name'; Expression={$_.ResourceID}}
                    $exportSAPA2ChangeList | Export-Csv $SaveSAPAChangeSheet2 -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                    $exportSAPA2ChangeList = @()
                    # Print result in Status box
                    $StatusLabel.SelectionColor = "Green"
                    $StatusLabel.SelectedText = "`nFørste del af SAPA rolledata fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $SAPAChangeSheet1Name"
                    $StatusLabel.SelectedText = "`nAnden del af SAPA rolledata fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $SAPAChangeSheet2Name"
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Filen $SAPAChangeSheet1Name blev oprettet korrekt"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                    }                
                else {
                    # Log a message for no match found
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] !!!!! Der blev ikke fundet et match i SAPAReferenceFile !!!!!"
                    Add-Content -Path $logfile -Value $logEntry
                }
            }
        }
                    
        #### End of Create a CSV file for SAPA Change files####   
                            
                            
        #### Change Dynamic Template folders ####
        $exportdynChangeList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $orgChangeSheet) {
                if (![string]::IsNullOrEmpty($ws.Cells.Item($i, 1).Value())) {
                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null -or $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $dynChangeOrgForvaltningShort = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $dynChangeOrgForvaltningShort = $null
                    } # This section looks for a value in the "Forvaltning" coloumn in the LOS ark. If there is a value in the "Ny Forvaltning" or if there is a value in the "Nyt Navn" coloumn it will use the value from the "Forvaltning" coloumn

                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null -or $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $dynChangeOrgName = $ws.Cells.Item($i, 3).Value()
                    }
                    else {
                        $dynChangeOrgName = $null
                    } # This section looks for a value in the "Navn" coloumn in the LOS ark. If there is a value in the "Ny Forvaltning" or if there is a value in the "Nyt Navn" coloumn it will use the value from the "Navn" coloumn

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $dynChangeNewOrgForvaltningShort = $ws.Cells.Item($i, 10).Value()
                    } 
                    elseif ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $dynChangeNewOrgForvaltningShort = $ws.Cells.Item($i, 2).Value()
                    }
                    else {
                        $dynChangeNewOrgForvaltningShort = $null
                    } # This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will use that, otherwise it will use the value from the "Forvaltning" coloumn if there is a value in the "Nyt Navn" coloumn

                    if ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.cells.Item($i, 11).Value() -ne $null) {
                        $dynChangeNewOrgName = $ws.Cells.Item($i, 11).Value()
                    }
                    elseif ($ws.Cells.Item($i, 3).Value() -ne $null -and $ws.Cells.Item($i, 11).Value() -eq $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $dynChangeNewOrgName = $ws.Cells.Item($i, 3).Value()
                    }
                    else {
                        $dynChangeNewOrgName = $null
                    } # This section looks for a value in the "Navn" coloumn in the LOS ark and if there is a value in the "Nyt Navn" coloumn it will use that, otherwise it will use the value from the "Navn" coloumn if there is a value in the "Ny Forvaltning" coloumn

                    if ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -ne $null) {
                        $dynChangeNewOrgForvaltning = $TranslateArr | Where-Object { $_.ShortName -eq $dynChangeNewOrgForvaltningShort } | Select-Object -ExpandProperty ForvaltningsName
                    } 
                    elseif ($ws.Cells.Item($i, 2).Value() -ne $null -and $ws.Cells.Item($i, 10).Value() -eq $null -and $ws.Cells.Item($i, 11).Value() -ne $null) {
                        $dynChangeNewOrgForvaltning = $TranslateArr | Where-Object { $_.ShortName -eq $dynChangeOrgForvaltningShort } | Select-Object -ExpandProperty ForvaltningsName
                    }
                    else {
                        $dynChangeNewOrgForvaltningShort = $null
                    } # This section looks for a value in the "Forvaltning" coloumn in the LOS ark and if there is a value in the "Ny Forvaltning" coloumn it will set "Ny forvaltning" in the CSV file, otherwise it will use the value from the "Forvaltning" coloumn if there is a value in the "Nyt Navn" coloumn

                    # Define what Org is selected and translate short name to full name
                    $dynChangeNewOrgunit | ForEach-Object {
                        if ($_ -ne $null) {
                            $dynChangeNewOrgForvaltning = $TranslateArr | Where-Object { $_.ShortName -eq $dynChangeNewOrgForvaltningShort } | Select-Object -ExpandProperty ForvaltningsName
                        }
                    }
                    
                    $dynChangeOrgunit = $dynChangeOrgForvaltningShort + ' ' + $dynChangeOrgName
                    $dynChangeNewOrgunit = $dynChangeNewOrgForvaltningShort + ' ' + $dynChangeNewOrgName

                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for Dyn Temp ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            # Create dynTempCreateObj with the required properties
            $dynTempChangeObj = New-Object System.Object
            $dynTempChangeObj | Add-Member -Type NoteProperty -Name Organisationsnavn -Value $dynChangeOrgunit
            $dynTempChangeObj | Add-Member -Type NoteProperty -Name 'Nyt Organisationsnavn' -Value $dynChangeNewOrgunit
            $dynTempChangeObj | Add-Member -Type NoteProperty -Name 'Nyt Afdelingsnavn' -Value $dynChangeNewOrgName
            $dynTempChangeObj | Add-Member -Type NoteProperty -Name 'Nyt Forvaltningsnavn' -Value $dynChangeNewOrgForvaltning

            # Add $dynTempCreateObj to the export list
            $exportdynChangeList += $dynTempChangeObj

            $i++    

        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportdynChangeList | Where-Object { $_.Organisationsnavn -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres Dynamic Template foldere. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveDynTempChangeSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $DynTempChangeSheetName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $DynTempChangeSheetName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportdynChangeList | Export-Csv $SaveDynTempChangeSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportdynChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDynamic Template data fra fanen $orgChangeSheetName blev eksporteret til CSV filen: $DynTempChangeSheetName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $LederFunkChangeSheet2Name blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }    

        #### End of Change Dynamic Template folders ####


        #### Create a CSV file for Acadre Change ####
        $exportAcadreChangeList = @()
        $acadreChangeSheetName = $acadreChangeSheet.name
        $i = 2

        # Load information from the worksheet
        do {
            foreach ($ws in $acadreChangeSheet) {
                if ($ws.Cells.Item($i, 1) -ne $null) {
                    $acadreChangeOldName = $ws.Cells.Item($i, 1).Value()

                    # Tjek om der er en værdi i celle $i, 2
                    if ($ws.Cells.Item($i, 2).Value() -ne $null) {
                        $acadreChangeNewName = $ws.Cells.Item($i, 2).Value()
                        $acadreChangeNewDesc = $ws.Cells.Item($i, 2).Value()

                        # Tjek om længden er over 30
                        if ($acadreChangeNewName.Length -gt 30) {
                            $acadreChangeNewName = $acadreChangeNewName.Substring(0, 30)
                        }
                    } else {
                        $acadreChangeNewName = ""
                        $acadreChangeNewDesc = ""
                    }                    

                    $acadreChangeNewParent = $ws.Cells.Item($i, 3).Value()
                } # End the if loop
            } # End the foreach loop

            $i++    

            # Create acadreChangeObj with the required properties
            $acadreChangeObj = New-Object System.Object
            $acadreChangeObj | Add-Member -Type NoteProperty -Name Navn -Value $acadreChangeOldName
            $acadreChangeObj | Add-Member -Type NoteProperty -Name 'Nyt navn' -Value $acadreChangeNewName
            $acadreChangeObj | Add-Member -Type NoteProperty -Name 'Ny beskrivelse' -Value $acadreChangeNewDesc
            $acadreChangeObj | Add-Member -Type NoteProperty -Name 'Ny Overliggende enhed' -Value $acadreChangeNewParent

            # Add $acadreChangeObj to the export list
            $exportAcadreChangeList += $acadreChangeObj
        } while ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportAcadreChangeList | Where-Object { $_.Navn -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres i Acadre. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveAcadreChangeSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $AcadreChangeCSVName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $AcadreChangeCSVName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportAcadreChangeList | Export-Csv $SaveAcadreChangeSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportAcadreChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nAcadre data fra fanen $acadreChangeSheetName blev eksporteret til CSV filen: $AcadreChangeCSVName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $AcadreChangeCSVName blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }


        #### End of Acadre Change ####


        #### Create a CSV file for Drive Change ####

        $exportDriveChangeList = @()
        $driveChangeSheetName = $driveChangeSheet.name
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $driveChangeSheet) {
                if ($ws.Cells.Item($i, 1) -ne $null ) {
                    $driveChangeShortName = $ws.Cells.Item($i, 1).Value()
                    $driveChangeFullName = $ws.Cells.Item($i, 2).Value()
                    $driveChangeShortNameNew = $ws.Cells.Item($i, 3).Value()
                    $driveChangeFullNameNew = $ws.Cells.Item($i, 4).Value()
                    $driveChangeOrg = $ws.Cells.Item($i, 5).Value()
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for drev ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create driveChangeObj with the required properties
            $driveChangeObj = New-Object System.Object
            $driveChangeObj | Add-Member -Type NoteProperty -Name Forvaltning -Value $driveChangeShortName
            $driveChangeObj | Add-Member -Type NoteProperty -Name Mappenavn -Value $driveChangeFullName
            $driveChangeObj | Add-Member -Type NoteProperty -Name 'Ny Forvaltning' -Value $driveChangeShortNameNew
            $driveChangeObj | Add-Member -Type NoteProperty -Name 'Nyt Mappenavn' -Value $driveChangeFullNameNew
            $driveChangeObj | Add-Member -Type NoteProperty -Name Organisationsenhed -Value $driveChangeOrg

            # Add $driveChangeObj to the export list
            $exportDriveChangeList += $driveChangeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        $hasValues = $exportDriveChangeList | Where-Object { $_.Forvaltning -ne $null -or $_.Mappenavn -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres G-drev. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveRenameOrgFoldersSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $RenameOrgFoldersName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $RenameOrgFoldersName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportDriveChangeList | Export-Csv $SaveRenameOrgFoldersSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation
                $exportDriveChangeList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nG-drev data fra fanen $driveChangeSheetName blev eksporteret til CSV filen: $RenameOrgFoldersName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $RenameOrgFoldersName blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Create a CSV file for Drive Change ####

        #### Create a CSV file for Role owner change ####

        $exportRoleOwnerDlList = @()
        $dlChangeSheetName = $dlChangeSheet.name
        $i = 2

        # Load information from the worksheet
        Do {
            $roleOwnerDlID = $dlChangeSheet.Cells.Item($i, 1).Value()
            $NewRoleOwner = $dlChangeSheet.Cells.Item($i, 8).Value()

            if ($roleOwnerDlID -ne $null -and $NewRoleOwner -ne $null) {
                # Split the content by comma
                $newRoleOwnerValues = $NewRoleOwner -split ','

                foreach ($value in $newRoleOwnerValues) {
                    # Extract the content inside hard brackets
                    $manualOwnerValue = $value -replace '^[^\[]*\[([^\]]*)\].*$', '$1'

                    # Create roleOwnerDlObj with the required properties
                    $roleOwnerDlObj = New-Object PSObject -Property @{
                        Name            = $roleOwnerDlID
                        'Manual owners' = $manualOwnerValue.Trim()
                    }

                    # Add $roleOwnerDlObj to the export list
                    $exportRoleOwnerDlList += $roleOwnerDlObj
                }
            }
            elseif ($roleOwnerDlID -eq $null) {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Der var ingen værdi i variablen for DL rolle ejer ændre"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }

            $i++
        } While ($dlChangeSheet.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($exportRoleOwnerDlList.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke laves ændringer af DL rolle ejer. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveRoleOwnerSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $roleOwnerSheetName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportRoleOwnerDlList | Select-Object Name, 'Manual owners' | Export-Csv $SaveRoleOwnerSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Force
                $exportRoleOwnerDlList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDL rolle ejer data fra fanen $dlChangeSheetName blev eksporteret til CSV filen: $roleOwnerSheetName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }

        #### End of Create a CSV file for Role owner change ####


        #### Continue Role owner change in Calender Sheet ####

        $exportRoleOwnerCalList = @()
        $calenderChangeSheetName = $calenderChangeSheet.name
        $i = 2

        # Load information from the worksheet
        Do {
            $roleOwnerCalID = $calenderChangeSheet.Cells.Item($i, 1).Value()
            $NewCalRoleOwner = $calenderChangeSheet.Cells.Item($i, 5).Value()

            if ($roleOwnerCalID -ne $null -and $NewCalRoleOwner -ne $null) {
                # Split the content by comma
                $newRoleOwnerCalValues = $NewCalRoleOwner -split ','

                foreach ($value in $newRoleOwnerCalValues) {
                    # Extract the content inside hard brackets
                    $manualOwnerCalValue = $value -replace '^[^\[]*\[([^\]]*)\].*$', '$1'

                    # Create roleOwnerDlObj with the required properties
                    $roleOwnerCalObj = New-Object PSObject -Property @{
                        Name            = $roleOwnerCalID
                        'Manual owners' = $manualOwnerCalValue.Trim()
                    }

                    # Add $roleOwnerDlObj to the export list
                    $exportRoleOwnerCalList += $roleOwnerCalObj
                }
            }
            elseif ($roleOwnerCalID -eq $null) {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Der var ingen værdi i variablen for Kalender rolle ejer ændre"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }

            $i++    

        } While ($calenderChangeSheet.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($exportRoleOwnerCalList.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke laves ændringer af Kalender rolle ejer. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveRoleOwnerSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $roleOwnerSheetName blev ikke opdateret med Kalender rolle ejer data, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev ikke opdateret med Kalender rolle ejer data, da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportRoleOwnerCalList | Select-Object Name, 'Manual owners' | Export-Csv $SaveRoleOwnerSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportRoleOwnerCalList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nKalender rolle ejer data fra fanen $calenderChangeSheetName blev tilføjet til CSV filen: $roleOwnerSheetName"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev opdateret korrekt med Kalender rolle ejer data"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
            
        #### End of Continue Role owner change in Calender Sheet ####


        #### Continue Role owner change in Mailbox Sheet ####

        $exportRoleOwnerMailList = @()
        $mailChangeSheetName = $mailChangeSheet.name
        $i = 2

        # Load information from the worksheet
        Do {
            $roleOwnerMailID = $mailChangeSheet.Cells.Item($i, 1).Value()
            $NewMailRoleOwner = $mailChangeSheet.Cells.Item($i, 8).Value()

            if ($roleOwnerMailID -ne $null -and $NewMailRoleOwner -ne $null) {
                # Split the content by comma
                $newRoleOwnerMailValues = $NewMailRoleOwner -split ','

                foreach ($value in $newRoleOwnerMailValues) {
                    # Extract the content inside hard brackets
                    $manualOwnerMailValue = $value -replace '^[^\[]*\[([^\]]*)\].*$', '$1'

                    # Create roleOwnerDlObj with the required properties
                    $roleOwnerMailObj = New-Object PSObject -Property @{
                        Name            = $roleOwnerMailID
                        'Manual owners' = $manualOwnerMailValue.Trim()
                    }

                    # Add $roleOwnerDlObj to the export list
                    $exportRoleOwnerMailList += $roleOwnerMailObj
                }
            }
            elseif ($roleOwnerMailID -eq $null) {
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Der var ingen værdi i variablen for Mailboks rolle ejer ændre"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }

            $i++    

        } While ($mailChangeSheet.Cells.Item($i, 1).Value() -ne $null) #End the Do loop

        # Check if export is needed
        if ($exportRoleOwnerMailList.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke laves ændringer af Mailboks rolle ejer. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveRoleOwnerSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $roleOwnerSheetName blev ikke opdateret med Mailboks rolle ejer data, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev ikke opdateret med Mailboks rolle ejer data, da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportRoleOwnerMailList | Select-Object Name, 'Manual owners' | Export-Csv $SaveRoleOwnerSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportRoleOwnerMailList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nMailboks rolle ejer data fra fanen $mailChangeSheetName blev eksporteret til CSV filen: $roleOwnerSheetName"
                $logEntry = "[$timestamp] Filen $roleOwnerSheetName blev opdateret korrekt med Mailboks rolle ejer data"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
            
        #### End of Continue Role owner change in Mailbox Sheet ####

        #### Create a CSV file for DL Change ####

        $exportDLChangeList = @()
        $i = 2

        # Load information from the worksheet
        Do {
            foreach ($ws in $dlChangeSheet) {
                if ($ws.Cells.Item($i, 1).value() -ne $null ) {
                    if ($ws.Cells.Item($i, 1).value() -ne $null -and $ws.Cells.Item($i, 5).value() -ne $null) {
                        $dlChangeName = $ws.Cells.Item($i, 1).value()
                    }
                    elseif ($ws.Cells.Item($i, 1).value() -ne $null -and $ws.Cells.Item($i, 5).value() -eq $null) {
                        $dlChangeName = ""
                    }
                    else {
                        $dlChangeName = $null
                    }
                    if ($ws.Cells.Item($i, 5).value() -ne $null -and $ws.Cells.Item($i, 1).value() -ne $null) {
                        $dlChangeNewName = $ws.Cells.Item($i, 5).value()
                    }
                    elseif ($ws.Cells.Item($i, 1).value() -ne $null -and $ws.Cells.Item($i, 5).value() -eq $null) {
                        $dlChangeNewName = ""
                    }
                    else {
                        $dlChangeNewName = $null
                    }
                } #End the if loop
                else {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $logEntry = "[$timestamp] Der var ingen værdi i variablen for DL ændre"
                    # Write the success message to the log file
                    Add-Content -Path $logfile -Value $logEntry
                }
            } #End the foreach loop

            $i++    

            # Create dlChangeObj with the required properties
            $dlChangeObj = New-Object System.Object
            $dlChangeObj | Add-Member -Type NoteProperty -Name Navn -Value $dlChangeName
            $dlChangeObj | Add-Member -Type NoteProperty -Name 'Nyt navn' -Value $dlChangeNewName

            # Add $dlChangeObj to the export list
            $exportDLChangeList += $dlChangeObj
        } While ($ws.Cells.Item($i, 1).Value() -ne $null) #End the Do loop


        # Check if export is needed
        $hasValues = $dlChangeElements | Where-Object { $_.Navn -ne $null }
        if ($hasValues.Count -eq 0) {
            $StatusLabel.SelectionColor = "Green"
            $StatusLabel.SelectedText = "`nDer skal ikke ændres Funktions DL Lister. Scriptet fortsætter"
        }
        else {
            # Check if the new file name matches any file in the failedFiles array
            if ($failedFiles -contains $SaveDLChangeSheet) {
                # File name matches a failed file, skip creation
                $StatusLabel.SelectionColor = "Red"
                $StatusLabel.SelectedText = "`nFilen $dlChangeSaveName blev ikke oprettet, da den tidligere version af filen ikke kunne slettes."
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $dlChangeSaveName blev ikke oprettet da den tidligere version af filen ikke kunne slettes."
                # Write the error to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
            else {
                # File name does not match any failed file, proceed with creation    
                $exportDLChangeList.Where({ $_.Navn -ne "" }) | Export-Csv $SaveDLChangeSheet -Encoding $Encoding -NoClobber -Delimiter $Delimiter -NoTypeInformation -Append
                $exportRoleOwnerMailList = @()
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.SelectedText = "`nDL ændre data fra fanen $dlChangeSheetName blev eksporteret til CSV filen: $dlChangeSaveName"
                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                $logEntry = "[$timestamp] Filen $dlChangeSaveName blev oprettet korrekt"
                # Write the success message to the log file
                Add-Content -Path $logfile -Value $logEntry
            }
        }
        
        #### End of Continue Role owner change in Mailbox Sheet ####


        ############################################################################################ End of Change phase - Starting Delete phase ############################################################################################


        ############################################################################################ End of Delete phase - Setting up execution buttons  ############################################################################################

        #Close Excel after creating CSV files
        try {
            if ($Excel -ne $null -and $global:Workbook -ne $null) {
                [System.GC]::Collect()
                [System.GC]::WaitForPendingFinalizers()
                $Workbook.Close($false)
                $Excel.Quit()
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Workbook = $null
                $global:Excel = $null
            }
        }
        catch {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Fejl opstod under lukning af Workbook og afslutning af Excel efter oprettelse af CSV filer: $_"
            Add-Content -Path $logfile -Value $logEntry
        }
        finally {
            if ($global:Workbook -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                $global:Workbook = $null
            }
            if ($global:Excel -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Excel = $null
            }
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
        
        # Call the LimitFormSizeAndPosition function to ensure the form stays within screen boundaries
        LimitFormSizeAndPosition

        # Show the CSV exported dialog
        $result = [System.Windows.Forms.MessageBox]::Show("Eksport til CSV fuldført!", "CSV filer oprettet", "OK", "Information")

        if ($result -eq "OK") {
            $ExportButton.Visible = $false # Changed to $false to hide the button after CSV files are created. This is done to prevent errors if the button i pushed again.
        }

        #Enable and setup DynTemp Create button    
        if (Test-Path $SaveDynTempCreateSheet) {
            # Show Create Dynamic Template Button button and enable it
            $CreateDynButton.Visible = $true # Changed to $true to show button
            $CreateDynButton.Enabled = $true # Changed to $true to enable button
        }

        # Function to adjust Dynamic Template create button position
        function CreateDynButtonPosition() {
            $buttonX = $SheetLabel.Left
            $buttonY = $SheetLabel.Top + $SheetLabel.Height + 20
            $CreateDynButton.Location = New-Object System.Drawing.Point($buttonX, $buttonY)
        }

        # Call the function to adjust the initial position of the Create Dynamic Template button
        CreateDynButtonPosition

        # Add resize event to adjust the Create Dynamic Template button position
        $SheetLabel.add_SizeChanged({
                CreateDynButtonPosition
            })

        #Enable and setup DynTemp Change button    
        if (Test-Path $SaveDynTempChangeSheet) {
            # Show Change Dynamic Template Button button and enable it
            $ChangeDynButton.Visible = $true # Changed to $true to show button
            $ChangeDynButton.Enabled = $true # Changed to $true to enable button
        }

        # Function to adjust Dynamic Template change button position
        function ChangeDynButtonPosition() {
            if ($CreateDynButton.Visible -eq $true) {
                $buttonX = $SheetLabel.Left + 150
            }
            else {
                $buttonX = $SheetLabel.Left
            }
            $buttonY = $SheetLabel.Top + $SheetLabel.Height + 20
            $ChangeDynButton.Location = New-Object System.Drawing.Point($buttonX, $buttonY)
        }

        # Call the function to adjust the initial position of the Change Dynamic Template button
        ChangeDynButtonPosition

        # Call the function to adjust the initial position of the Dynamic Template change Template button
        ChangeDynButtonPosition

        # Add resize event to adjust the Dynamic Template change button position
        $SheetLabel.add_SizeChanged({
                ChangeDynButtonPosition
            })

        #Enable and setup DynTemp Delete button    
        if (Test-Path $SaveDynTempCreateSheet) {
            # Show DynTemp Delete Button and enable it
            $DeleteDynButton.Visible = $true # Changed to $true to show button
            $DeleteDynButton.Enabled = $true # Changed to $true to enable button
        }
    
        # Function to adjust DynTemp Delete position
        function DeleteDynButtonPosition() {
            if ($CreateDynButton.Visible -eq $true -and $ChangeDynButton.Visible -eq $true) {
                $buttonX = $SheetLabel.Left
                $buttonY = $SheetLabel.Top + $SheetLabel.Height + 60
            }
            elseif ($CreateDynButton.Visible -ne $true -and $ChangeDynButton.Visible -eq $true) {
                $buttonX = $SheetLabel.Left + 170
                $buttonY = $SheetLabel.Top + $SheetLabel.Height + 20
            }
            elseif ($CreateDynButton.Visible -eq $true -and $ChangeDynButton.Visible -ne $true) {
                $buttonX = $SheetLabel.Left + 150
                $buttonY = $SheetLabel.Top + $SheetLabel.Height + 20
            }
            else {
                $buttonX = $SheetLabel.Left
                $buttonY = $SheetLabel.Top + $SheetLabel.Height + 20
            }
            $DeleteDynButton.Location = New-Object System.Drawing.Point($buttonX, $buttonY)
        }
    
        # Call the function to adjust the initial position of the Dynamic Template Delete button
        DeleteDynButtonPosition
    
        # Call the function to adjust the initial position of the Dynamic Template Delete Template button
        DeleteDynButtonPosition
    
        # Add resize event to adjust the Dynamic Template Delete button position
        $SheetLabel.add_SizeChanged({
                DeleteDynButtonPosition
            })
    
        # Show Open Folder button and Add Click event to it
        $OpenFolderBtn.Visible = $true
        $OpenFolderBtn.Add_Click({
                Invoke-Item $global:CSVSavePath
            })

        $OpenFolderBtn.Enabled = $true
        $CancelButton.Text = "Luk"

        $logEntry = "-----Slut på oprettelse af CSV filer for ændring af data-----"
        # Write the success message to the log file
        Add-Content -Path $logfile -Value $logEntry

        # Add click event to Create Dynamic Template button
        $CreateDynButton.Add_Click({
                Clear-StatusLabel
                $StatusLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
                $StatusLabel.SelectedText = "Status:`n"
                $StatusLabel.SelectedText = "LOS ark indlæses`r`n"
                $StatusLabel.SelectedText = "Arket $global:FolderName er indlæst og klar til yderlig håndtering`r`n"
                $StatusLabel.SelectedText = "Dynamic Template data fra arket $global:FolderName bliver nu behandlet:`r`n"       
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.AppendText("`n`nOpretter nye Dynamic Template mapper")
                $logEntry = "`n`n-----Start på oprettelse af Dynamic Template mapper og filer-----"
                Add-Content -Path $logFile -Value $logEntry
            
                # Importer CSV-filen for DynCreate
                $dynCreateData = Import-Csv $SaveDynTempCreateSheet -Delimiter ";"
                $dynTempArray = Get-ChildItem -Path $dynTempDir -Directory

                # Gennemløb hvert element i CSV-dataene
                foreach ($row in $dynCreateData) {
                    # Hent mappenavne fra CSV-rækken
                    $DynFolderName = $row.Organisationsnavn

                    try {
                        # Kontroller om der eksisterer en mappe med det samme navn
                        $folder = $dynTempArray | Where-Object { $_.Name -eq $DynFolderName }
                        if ($folder) {
                            $StatusLabel.SelectionColor = "Orange"
                            $StatusLabel.AppendText("`n`nDynamic Template mappen $DynFolderName findes allerede og bliver ikke opdateret")
                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                            $logEntry = "[$timestamp] Dynamic Template folderen $DynFolderName findes allerede"
                            Add-Content -Path $logFile -Value $logEntry                    
                        }
                        else {
                            try {
                                # Generér den nye sti og navn for mappen
                                if ([string]::IsNullOrEmpty($DynFolderName)) {
                                    # Håndter tom $DynFolderName
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.AppendText("`nTomt mappenavn. Oprettelse springes over.")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "[$timestamp] Fejlmeddelelse: Tomt mappenavn"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                                else {
                                    # Generér den nye sti og navn for mappen
                                    $newFolderPath = Join-Path $dynTempDir $DynFolderName
                                                      
                                    # Opret den nye mappe
                                    New-Item -Path $newFolderPath -ItemType Directory | Out-Null
                                    $StatusLabel.SelectionColor = "Green"
                                    $StatusLabel.AppendText("`n`nFølgende nye Dynamic Template mappe er oprettet: ")
                                    $StatusLabel.SelectionColor = "Black"
                                    $StatusLabel.AppendText($DynFolderName)

                                    # Log oprettelsen af den nye mappe
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "[$timestamp] Ny Dynamic Template mappe er oprettet: $DynFolderName"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen: $DynFolderName")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse: $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Afdelingsnavn" inde i den nye mappe
                                $afdNavnFolderPath = Join-Path $newFolderPath "Afdelingsnavn"
                                New-Item -Path $afdNavnFolderPath -ItemType Directory | Out-Null
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Afdelingsnavn' er oprettet i Dynamic Template mappen: $DynFolderName ")
                        
                                # Log oprettelsen af mappen "Afdelingsnavn"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Afdelingsnavn"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                try {
                                    # Opdater eller opret tekstfilen Afdelingsnavn.txt med UTF8-BOM kodning
                                    $afdNavnFilePath = Join-Path $afdNavnFolderPath "Afdelingsnavn.txt"
                                    $newAfdNavn = $row.Afdelingsnavn
                                    $currentAfdNavn = ""
                                    if (Test-Path $afdNavnFilePath) {
                                        $currentAfdNavn = Get-Content -Path $afdNavnFilePath
                                    }
                        
                                    if ($newAfdNavn -ne $currentAfdNavn) {
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($afdNavnFilePath, $newAfdNavn, $utf8BomEncoder)
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.AppendText("`nTekstfilen Afdelingsnavn.txt er blevet oprettet med værdien: ")
                                        # $StatusLabel.SelectionColor = "Black"
                                        # $StatusLabel.AppendText($newAfdNavn)
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under opdateringen af tekstfilen Afdelingsnavn.")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse (opdatering af tekstfil): $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen Afdelingsnavn.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Bundgrafik" inde i den nye mappe
                                $bundgfxFolderPath = Join-Path $newFolderPath "Bundgrafik"
                                New-Item -Path $bundgfxFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Bundgrafik"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Bundgrafik"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Bundgrafik' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Bundgrafik'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Bundgrafik): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "EAN" inde i den nye mappe
                                $eanNavnFolderPath = Join-Path $newFolderPath "EAN"
                                New-Item -Path $eanNavnFolderPath -ItemType Directory | Out-Null
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'EAN' er oprettet i Dynamic Template mappen: $DynFolderName ")
                        
                                # Log oprettelsen af mappen "EAN"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: EAN"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                try {
                                    # Opdater eller opret tekstfilen EAN.txt med UTF8-BOM kodning
                                    $eanNavnFilePath = Join-Path $eanNavnFolderPath "EAN.txt"
                                    $currentEAN = ""
                        
                                    if (!(Test-Path $eanNavnFilePath)) {
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($eanNavnFilePath, $currentEAN, $utf8BomEncoder)
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.AppendText("`nTekstfilen EAN.txt er blevet oprettet")
                        
                                        # Log oprettelsen af tekstfilen
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Tekstfilen EAN.txt er blevet oprettet"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af tekstfilen EAN.txt")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af tekstfil) EAN: $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                        
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen EAN.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                                                    
                            try {
                                # Opret mappen "Email" inde i den nye mappe
                                $mailNavnFolderPath = Join-Path $newFolderPath "Email"
                                New-Item -Path $mailNavnFolderPath -ItemType Directory | Out-Null
                                # Succesfuld oprettelse af mappen "Email"
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Email' er oprettet i Dynamic Template mappen: $DynFolderName ")
                        
                                # Log oprettelsen af mappen "Email"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Email"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                try {
                                    # Opret mappen "Kampagne" inde i "Email" mappen
                                    $kampagneNavnFolderPath = Join-Path $mailNavnFolderPath "Kampagne"
                                    New-Item -Path $kampagneNavnFolderPath -ItemType Directory | Out-Null
                        
                                    try {
                                        # Opret mappen "OLD" inde i "Kampagne" mappen der ligger i "Email" mappen
                                        $kampagneOldFolderPath = Join-Path $kampagneNavnFolderPath "OLD"
                                        New-Item -Path $kampagneOldFolderPath -ItemType Directory | Out-Null
                        
                                        try {
                                            # Opdater eller opret tekstfilen Kampagne.txt med UTF8-BOM kodning i undermappen "Kampagne"
                                            $kampagneNavnSubFolderPath = Join-Path $kampagneNavnFolderPath "Kampagne.txt"
                                            $currentkampagne = ""
                        
                                            if (!(Test-Path $kampagneNavnSubFolderPath)) {
                                                $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                [System.IO.File]::WriteAllText($kampagneNavnSubFolderPath, $currentkampagne, $utf8BomEncoder)
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.AppendText("`nTekstfilen Kampagne.txt er blevet oprettet i undermappen 'Kampagne' i mappen 'Email'")
                        
                                                # Log oprettelsen af tekstfilen
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $logEntry = "[$timestamp] Tekstfilen Kampagne.txt er blevet oprettet"
                                                Add-Content -Path $logFile -Value $logEntry
                                            }
                                        }
                                        catch {
                                            $StatusLabel.SelectionColor = "Orange"
                                            $StatusLabel.AppendText("`nDer opstod en fejl under opdateringen/oprettelsen af tekstfilen (Kampagne.txt).")
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $logEntry = "`n[$timestamp] Fejlmeddelelse (opdatering/oprettelse af tekstfil - Kampagne.txt): $($_.Exception.Message)"
                                            Add-Content -Path $logFile -Value $logEntry
                                        }
                                    }
                                    catch {
                                        $StatusLabel.SelectionColor = "Orange"
                                        $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'OLD'.")
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - OLD): $($_.Exception.Message)"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Kampagne'.")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Kampagne): $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                        
                                try {
                                    # Opdater eller opret tekstfilen Email.txt med UTF8-BOM kodning
                                    $mailNavnFilePath = Join-Path $mailNavnFolderPath "Email.txt"
                                    $currentMail = ""
                        
                                    if (!(Test-Path $mailNavnFilePath)) {
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($mailNavnFilePath, $currentMail, $utf8BomEncoder)
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.AppendText("`nTekstfilen Email.txt er blevet oprettet")
                        
                                        # Log oprettelsen af tekstfilen
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Tekstfilen Email.txt er blevet oprettet"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af tekstfilen (Email.txt).")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af tekstfil - Email.txt): $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Email'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Email): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Forvaltningsnavn" inde i den nye mappe
                                $forvNavnFolderPath = Join-Path $newFolderPath "Forvaltningsnavn"
                                New-Item -Path $forvNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Forvaltningsnavn"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Forvaltningsnavn"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Forvaltningsnavn' er oprettet i Dynamic Template mappen: $DynFolderName")
                        
                                try {
                                    # Opdater eller opret tekstfilen Forvaltningsnavn.txt med UTF8-BOM kodning
                                    $forvNavnFilePath = Join-Path $forvNavnFolderPath "Forvaltningsnavn.txt"
                                    $newForvNavn = $row.Forvaltningsnavn
                                    $currentForvNavn = ""
                        
                                    if (Test-Path $forvNavnFilePath) {
                                        $currentForvNavn = Get-Content -Path $forvNavnFilePath
                                    }
                        
                                    if ($newForvNavn -ne $currentForvNavn) {
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($forvNavnFilePath, $newForvNavn, $utf8BomEncoder)
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.AppendText("`nTekstfilen Forvaltningsnavn.txt er blevet oprettet med værdien: ")
                                        # $StatusLabel.SelectionColor = "Black"
                                        # $StatusLabel.AppendText($newForvNavn)
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af tekstfilen (Forvaltningsnavn.txt).")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af tekstfil - Forvaltningsnavn.txt): $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Forvaltningsnavn'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Forvaltningsnavn): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                                                    
                            try {
                                # Opret mappen "Kampagne" inde i den nye mappe
                                $kampagneNavnFolderPath = Join-Path $newFolderPath "Kampagne"
                                New-Item -Path $kampagneNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Kampagne"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Kampagne"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Kampagne' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Kampagne'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Kampagne): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Logo" inde i den nye mappe
                                $logoNavnFolderPath = Join-Path $newFolderPath "Logo"
                                New-Item -Path $logoNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Logo"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Logo"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Logo' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Logo'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Logo): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Webadresse" inde i den nye mappe
                                $webadNavnFolderPath = Join-Path $newFolderPath "Webadresse"
                                New-Item -Path $webadNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Webadresse"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Webadresse"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Webadresse' er oprettet i Dynamic Template mappen: $DynFolderName")
                        
                                try {
                                    # Opdater eller opret tekstfilen Webadresse.txt med UTF8-BOM kodning
                                    $webadNavnFilePath = Join-Path $webadNavnFolderPath "Webadresse.txt"
                                    $currentWebad = ""
                        
                                    if (!(Test-Path $webadNavnFilePath)) {
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($webadNavnFilePath, $currentWebad, $utf8BomEncoder)
                                        #$StatusLabel.SelectionColor = "Green"
                                        #$StatusLabel.AppendText("`nTekstfilen Webadresse.txt er blevet oprettet")
                        
                                        # Log oprettelsen af tekstfilen
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Tekstfilen Webadresse.txt er blevet oprettet"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af tekstfilen (Webadresse.txt).")
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "`n[$timestamp] Fejlmeddelelse oprettelse af tekstfil - Webadresse.txt): $($_.Exception.Message)"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Webadresse'.")
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "`n[$timestamp] Fejlmeddelelse (oprettelse af mappe - Webadresse): $($_.Exception.Message)"
                                Add-Content -Path $logFile -Value $logEntry
                            }
                        
                            try {
                                # Opret mappen "Weblink" inde i den nye mappe
                                $WeblinkNavnFolderPath = Join-Path $newFolderPath "Weblink"
                                New-Item -Path $WeblinkNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Weblink"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Weblink"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Weblink' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Weblink'")
                            }
                        
                            try {
                                # Opret mappen "Weblink2" inde i den nye mappe
                                $Weblink2NavnFolderPath = Join-Path $newFolderPath "Weblink2"
                                New-Item -Path $Weblink2NavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Weblink2"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Weblink2"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Weblink2' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Weblink2'")
                            }
                        
                            try {
                                # Opret mappen "Webtxt" inde i den nye mappe
                                $WebtxtNavnFolderPath = Join-Path $newFolderPath "Webtxt"
                                New-Item -Path $WebtxtNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Webtxt"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Webtxt"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Webtxt' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Webtxt'")
                            }
                        
                            try {
                                # Opret mappen "Webtxt2" inde i den nye mappe
                                $Webtxt2NavnFolderPath = Join-Path $newFolderPath "Webtxt2"
                                New-Item -Path $Webtxt2NavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Webtxt2"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Webtxt2"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Webtxt2' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Webtxt2'")
                            }
                        
                            try {
                                # Opret mappen "Åbningstider" inde i den nye mappe
                                $timeNavnFolderPath = Join-Path $newFolderPath "Åbningstider"
                                New-Item -Path $timeNavnFolderPath -ItemType Directory | Out-Null
                        
                                # Log oprettelsen af mappen "Åbningstider"
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $logEntry = "[$timestamp] Ny mappe er oprettet: Åbningstider"
                                Add-Content -Path $logFile -Value $logEntry
                        
                                # $StatusLabel.SelectionColor = "Green"
                                # $StatusLabel.AppendText("`nMappen 'Åbningstider' er oprettet i Dynamic Template mappen: $DynFolderName")
                            }
                            catch {
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.AppendText("`nDer opstod en fejl under oprettelsen af mappen 'Åbningstider'")
                            }
                        }
                    }
                    catch {
                        $StatusLabel.SelectionColor = "Red"
                        $StatusLabel.AppendText("`n`Fejl: $_")
                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                        $logEntry = "[$timestamp] Fejl opstod under oprettelse af nye Dynamic Template foldere: $_"
                        Add-Content -Path $logFile -Value $logEntry        
                    }
                }
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.AppendText("`n`nAfsluttet Dynamic Template oprettelse.")
                $logEntry = "-----Slut på oprettelse af Dynamic Template mapper og filer-----"
                Add-Content -Path $logFile -Value $logEntry        
            })
    
        # Add click event to Change Dynamic Template button
        $ChangeDynButton.Add_Click({
                Clear-StatusLabel
                $StatusLabel.SelectionFont = New-Object System.Drawing.Font($Font, [System.Drawing.FontStyle]::Bold)
                $StatusLabel.SelectedText = "Status:`n"
                $StatusLabel.SelectedText = "LOS ark indlæses`r`n"
                $StatusLabel.SelectedText = "Arket $global:FolderName er indlæst og klar til yderlig håndtering`r`n"
                $StatusLabel.SelectedText = "Dynamic Template data fra arket $global:FolderName bliver nu behandlet:`r`n"       
                $StatusLabel.SelectionColor = "Green"
                $StatusLabel.AppendText("`n`nOpdaterer eksisterende Dynamic Template mapper")
                $logEntry = "`n`n-----Start på opdatering af Dynamic Template mapper og filer-----"
                Add-Content -Path $logFile -Value $logEntry

                try {
                    if (!(Test-Path $SaveDynTempChangeSheet)) {
                        $errorText = "CSV-filen '$SaveDynTempChangeSheet' eksisterer ikke eller er ugyldig."
                        $StatusLabel.SelectionColor = "Orange"
                        $StatusLabel.SelectedText = "`n$errorText"
                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                        $logEntry = "[$timestamp]" + " " + $errorText
                        Add-Content -Path $logFile -Value $logEntry
            
                    }
                    else {
                        $dynChangeData = Import-Csv $SaveDynTempChangeSheet
            
                        foreach ($row in $dynChangeData) {
                            $oldName = $row.Organisationsnavn
                            $updatedName = $row.'Nyt Organisationsnavn'
                            $updatedForvName = $row.'Nyt Forvaltningsnavn'
            
                            try {
                                $folder = Get-ChildItem -Path $dynTempDir -Directory | Where-Object { $_.Name -eq $oldName }

                                if (!$folder) {
                                    $errorText = "Dynamic Template mappen '$oldName' eksisterer ikke."
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "[$timestamp] $errorText"
                                    Add-Content -Path $logFile -Value $logEntry

                                    $StatusLabel.SelectionColor = "Orange"
                                    $StatusLabel.SelectedText = "`n$errorText"
                                }
                                else {
                                    try {
                                        $updatedFolderPath = Join-Path $dynTempDir $updatedName
                                        Rename-Item -Path $folder.FullName -NewName $updatedName -ErrorAction Stop
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen $folder er opdateret til $updatedName"
                                        Add-Content -Path $logFile -Value $logEntry    
                                        $StatusLabel.SelectionColor = "Green"
                                        $StatusLabel.SelectedText = "`n`nMappen $folder er opdateret til $updatedName"
                                    }
                                    catch {
                                        $errorMessage = $_.Exception.Message
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Fejl under opdatering af Dynamic Template mappen:`n$errorMessage"
                                        Add-Content -Path $logFile -Value $logEntry
                                        $StatusLabel.SelectionColor = "Red"
                                        $StatusLabel.SelectedText = "`n$errorText"
                                    }
                                }
            
                                # Kontroller om mappen "Afdelingsnavn" eksisterer
                                $afdNavnFolderPath = Join-Path $updatedFolderPath "Afdelingsnavn"
                                try {
                                    if (!(Test-Path $afdNavnFolderPath)) {
                                        # Opret mappen "Afdelingsnavn" med værdierne
                                        New-Item -Path $afdNavnFolderPath -ItemType Directory | Out-Null
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText("$afdNavnFolderPath\Afdelingsnavn.txt", $updatedName, $utf8BomEncoder)
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Afdelingsnavn' er blevet oprettet med værdien '$updatedName'."
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nMappen 'Afdelingsnavn' er blevet oprettet."
                                    }
                                    else {
                                        # Kontroller om tekstfilen "Afdelingsnavn.txt" eksisterer og indeholder den rigtige værdi
                                        $afdNavnFilePath = Join-Path $afdNavnFolderPath "Afdelingsnavn.txt"
                                        if (Test-Path $afdNavnFilePath) {
                                            $currentAfdNavn = Get-Content -Path $afdNavnFilePath
                                            if ($currentAfdNavn -ne $updatedName) {
                                                $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                [System.IO.File]::WriteAllText($afdNavnFilePath, $updatedName, $utf8BomEncoder)
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $logEntry = "[$timestamp] Tekstfilen '$afdNavnFilePath' er blevet opdateret med værdien '$updatedName' i UTF8-BOM kodning."
                                                Add-Content -Path $logFile -Value $logEntry
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.SelectedText = "`nTekstfilen 'Afdelingsnavn.txt' er blevet opdateret med værdien: $updatedName"
                                            }
                                            else {
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $errorLogEntry = "[$timestamp] Tekstfilen 'Afdelingsnavn.txt' er allerede opdateret med den rigtige værdi"
                                                Add-Content -Path $logFile -Value $errorLogEntry
                                            }
                                        }
                                        else {
                                            # Opret en tekstfil "Afdelingsnavn.txt" med værdien i UTF8-BOM format
                                            $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                            [System.IO.File]::WriteAllText($afdNavnFilePath, $updatedName, $utf8BomEncoder)
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $logEntry = "[$timestamp] Tekstfilen '$afdNavnFilePath' er blevet oprettet med værdien '$updatedName' i UTF8-BOM kodning."
                                            Add-Content -Path $logFile -Value $logEntry
                                            # $StatusLabel.SelectionColor = "Green"
                                            # $StatusLabel.SelectedText = "`nTekstfilen 'Afdelingsnavn.txt' er blevet oprettet med værdien: $updatedName"
                                        }
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse/opdatering af 'Afdelingsnavn' mappen og filen: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse/opdatering af 'Afdelingsnavn' mappen og filen: $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }
            
                                # Kontroller om mappen "Bundgrafik" eksisterer
                                $bundgfxFolderPath = Join-Path $updatedFolderPath "Bundgrafik"
                                if (!(Test-Path $bundgfxFolderPath)) {
                                    # Opret mappen "Bundgrafik"
                                    try {
                                        New-Item -Path $bundgfxFolderPath -ItemType Directory -ErrorAction Stop | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Bundgrafik"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Bundgrafik"
                                    }
                                    catch {
                                        # Håndter eventuelle fejl, der opstår under oprettelse af mappen
                                        $errorMessage = $_.Exception.Message
                                        $StatusLabel.SelectionColor = "Red"
                                        $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Bundgrafik: $errorMessage"
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Bundgrafik': $errorMessage"
                                        Add-Content -Path $logFile -Value $errorLogEntry
                                    }
                                }
                                else {
                                    # Log eksisterende mappe uden at kaste en fejl
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "[$timestamp] Mappen 'Bundgrafik' eksisterer allerede og bliver ikke opdateret"
                                    Add-Content -Path $logFile -Value $logEntry
                                }
            
                                # Kontroller om mappen "EAN" eksisterer
                                $eanFolderPath = Join-Path $updatedFolderPath "EAN"
                                try {
                                    if (Test-Path $eanFolderPath) {
                                        # Kontroller om tekstfilen "EAN.txt" eksisterer og er korrekt formatteret
                                        $eanFilePath = Join-Path $eanFolderPath "EAN.txt"
                                        if (Test-Path $eanFilePath) {
                                            $eanContent = Get-Content -Path $eanFilePath -Encoding UTF8
                                            if ($eanContent -notmatch "^\xEF\xBB\xBF") {
                                                $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                [System.IO.File]::WriteAllText($eanFilePath, $eanContent, $utf8BomEncoder)
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $logEntry = "[$timestamp] Tekstfilen '$eanFilePath' er blevet formatteret som UTF8-BOM uden at ændre indholdet."
                                                Add-Content -Path $logFile -Value $logEntry
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.SelectedText = "`nTekstfilen 'EAN.txt' er blevet formatteret korrekt."
                                            }
                                            else {
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $errorLogEntry = "[$timestamp] Tekstfilen 'EAN.txt' er allerede formatteret korrekt"
                                                Add-Content -Path $logFile -Value $errorLogEntry
                                            }
                                        }
                                        else {
                                            # Opret en tom tekstfil "EAN.txt" i UTF8-BOM format
                                            $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                            [System.IO.File]::WriteAllText($eanFilePath, "", $utf8BomEncoder)
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $logEntry = "[$timestamp] Tekstfilen '$eanFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM format."
                                            Add-Content -Path $logFile -Value $logEntry
                                            # $StatusLabel.SelectionColor = "Green"
                                            # $StatusLabel.SelectedText = "`nTekstfilen 'EAN.txt' er blevet oprettet som et tomt dokument i korrekt format."
                                        }
                                    }
                                    else {
                                        # Opret mappen "EAN" og en tom tekstfil "EAN.txt" i UTF8-BOM format
                                        New-Item -Path $eanFolderPath -ItemType Directory | Out-Null
                                        $eanFilePath = Join-Path $eanFolderPath "EAN.txt"
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText($eanFilePath, "", $utf8BomEncoder)
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'EAN' er blevet oprettet, og tekstfilen '$eanFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM format."
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nMappen 'EAN' er blevet oprettet, og tekstfilen 'EAN.txt' er blevet oprettet som et tomt dokument i korrekt format."
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl opstod under oprettelse/opdatering af 'EAN' mappen og filen: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse/opdatering af 'EAN' mappen og filen: $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Email" eksisterer
                                $emailFolderPath = Join-Path $updatedFolderPath "Email"
                                try {
                                    if (Test-Path $emailFolderPath) {
                                        # Kontroller om mappen "Kampagne" eksisterer inden for mappen "Email"
                                        $kampagneFolderPath = Join-Path $emailFolderPath "Kampagne"
                                        try {
                                            if (Test-Path $kampagneFolderPath) {
                                                # Kontroller om tekstfilen "Kampagne.txt" eksisterer
                                                $kampagneFilePath = Join-Path $kampagneFolderPath "Kampagne.txt"
                                                try {
                                                    if (Test-Path $kampagneFilePath) {
                                                        $currentKampagneBytes = [System.IO.File]::ReadAllBytes($kampagneFilePath)
                                                        $isUtf8BomFormatted = ($currentKampagneBytes[0] -eq 0xEF) -and ($currentKampagneBytes[1] -eq 0xBB) -and ($currentKampagneBytes[2] -eq 0xBF)
    
                                                        # Kontroller om tekstfilen er korrekt formatteret som UTF8-BOM
                                                        $kampagneContent = Get-Content -Path $kampagneFilePath -Raw
                                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)

                                                        if (!$isUtf8BomFormatted) {
                                                            # Overskriv den eksisterende fil med en ny fil i UTF8-BOM format
                                                            [System.IO.File]::WriteAllText($kampagneFilePath, $kampagneContent, $utf8BomEncoder)
                                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                            $logEntry = "[$timestamp] Tekstfilen '$kampagneFilePath' er ikke korrekt formatteret som UTF8-BOM. Filen er blevet overskrevet med en ny fil i UTF8-BOM format."
                                                            Add-Content -Path $logFile -Value $logEntry
                                                            # $StatusLabel.SelectionColor = "Green"
                                                            # $StatusLabel.SelectedText = "`n$logEntry"
                                                        }
                                                        else {
                                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                            $errorLogEntry = "[$timestamp] Tekstfilen '$kampagneFilePath' er allerede formatteret korrekt"
                                                            Add-Content -Path $logFile -Value $errorLogEntry            
                                                        }
                                                    }
                                                    else {
                                                        # Opret en tom tekstfil "Kampagne.txt" i UTF8-BOM format
                                                        [System.IO.File]::WriteAllText($kampagneFilePath, "", $utf8BomEncoder)
                                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                        $logEntry = "[$timestamp] Tekstfilen '$kampagneFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM kodning."
                                                        Add-Content -Path $logFile -Value $logEntry
                                                        # $StatusLabel.SelectionColor = "Green"
                                                        # $StatusLabel.SelectedText = "`n$logEntry"
                                                    }
                                                }
                                                catch {
                                                    # Håndter eventuelle fejl vedrørende opdatering/oprettelse af tekstfilen
                                                    $errorMessage = $_.Exception.Message
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $errorLogEntry = "Fejl under opdatering/oprettelse af tekstfilen '$kampagneFilePath':`n$errorMessage"
                                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                                    $StatusLabel.SelectionColor = "Red"
                                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                                }

                                                # Kontroller om mappen "OLD" eksisterer inden for mappen "Kampagne"
                                                $oldFolderPath = Join-Path $kampagneFolderPath "OLD"
                                                try {
                                                    if (!(Test-Path $oldFolderPath)) {
                                                        # Opret mappen "OLD" inden for mappen "Kampagne"
                                                        New-Item -Path $oldFolderPath -ItemType Directory | Out-Null
                                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                        $logEntry = "[$timestamp] Mappen 'OLD' er blevet oprettet inden for mappen 'Kampagne'."
                                                        Add-Content -Path $logFile -Value $logEntry
                                                        # $StatusLabel.SelectionColor = "Green"
                                                        # $StatusLabel.SelectedText = "`n$logEntry"
                                                    }
                                                }
                                                catch {
                                                    # Håndter eventuelle fejl vedrørende oprettelse af mappen
                                                    $errorMessage = $_.Exception.Message
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $errorLogEntry = "Fejl under oprettelse af mappen 'OLD':`n$errorMessage"
                                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                                    $StatusLabel.SelectionColor = "Red"
                                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                                }
                                            }
                                            else {
                                                # Opret mappen "Kampagne" inklusive mappen "OLD" og en tom tekstfil "Kampagne.txt" i UTF8-BOM format
                                                New-Item -Path $kampagneFolderPath -ItemType Directory | Out-Null
                                                $kampagneFilePath = Join-Path $kampagneFolderPath "Kampagne.txt"
                                                try {
                                                    [System.IO.File]::WriteAllText($kampagneFilePath, "", $utf8BomEncoder)
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $logEntry = "[$timestamp] Mappen 'Kampagne' er blevet oprettet, mappen 'OLD' er blevet oprettet inden for den, og tekstfilen '$kampagneFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM kodning."
                                                    Add-Content -Path $logFile -Value $logEntry
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"

                                                    # Opret mappen "OLD" inden for mappen "Kampagne"
                                                    $oldFolderPath = Join-Path $kampagneFolderPath "OLD"
                                                    New-Item -Path $oldFolderPath -ItemType Directory | Out-Null
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $logEntry = "[$timestamp] Mappen 'OLD' er blevet oprettet inden for mappen 'Kampagne'."
                                                    Add-Content -Path $logFile -Value $logEntry
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"
                                                }
                                                catch {
                                                    # Håndter eventuelle fejl vedrørende oprettelse/opdatering af tekstfilen
                                                    $errorMessage = $_.Exception.Message
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $errorLogEntry = "Fejl under oprettelse/opdatering af tekstfilen '$kampagneFilePath':`n$errorMessage"
                                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                                    $StatusLabel.SelectionColor = "Red"
                                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                                }
                                            }
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende oprettelse/opdatering af mappen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under oprettelse/opdatering af 'Kampagne' mappen og filen:`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }

                                        # Kontroller om tekstfilen "Email.txt" eksisterer
                                        $emailFilePath = Join-Path $emailFolderPath "Email.txt"
                                        try {
                                            if (Test-Path $emailFilePath) {
                                                $currentEmailBytes = [System.IO.File]::ReadAllBytes($emailFilePath)
                                                $isUtf8BomFormatted = ($currentEmailBytes[0] -eq 0xEF) -and ($currentEmailBytes[1] -eq 0xBB) -and ($currentEmailBytes[2] -eq 0xBF)
                                        
                                                if (!$isUtf8BomFormatted) {
                                                    # Overskriv den eksisterende fil med en ny fil i UTF8-BOM format
                                                    $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                    [System.IO.File]::WriteAllText($emailFilePath, $utf8BomEncoder)
                                        
                                                    $logEntry = "Tekstfilen '$emailFilePath' er ikke korrekt formatteret som UTF8-BOM. Filen er blevet overskrevet med en ny fil i UTF8-BOM format."
                                                    Add-Content -Path $logFile -Value "[$(Get-Date -Format "dd-MM-yyyy HH:mm:ss")] $logEntry"
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"
                                                }
                                                else {
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $errorLogEntry = "[$timestamp] Tekstfilen '$emailFilePath' er allerede formatteret korrekt"
                                                    Add-Content -Path $logFile -Value $errorLogEntry            
                                                }
                                            }
                                            else {
                                                # Opret en tom tekstfil "Email.txt" i UTF8-BOM format
                                                $byteOrderMarkUtf8 = [byte[]](0xEF, 0xBB, 0xBF)
                                                [System.IO.File]::WriteAllBytes($emailFilePath, $byteOrderMarkUtf8)
                                        
                                                $logEntry = "Tekstfilen '$emailFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM kodning."
                                                Add-Content -Path $logFile -Value "[$(Get-Date -Format "dd-MM-yyyy HH:mm:ss")] $logEntry"
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.SelectedText = "`n$logEntry"
                                            }
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende opdatering/oprettelse af tekstfilen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under opdatering/oprettelse af tekstfilen '$emailFilePath':`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }
                                    }
                                    else {
                                        # Opret mappen "Email" inklusive mappen "Kampagne", mappen "OLD" og en tom tekstfil "Kampagne.txt" i UTF8-BOM format
                                        New-Item -Path $emailFolderPath -ItemType Directory | Out-Null
                                        $kampagneFolderPath = Join-Path $emailFolderPath "Kampagne"
                                        try {
                                            New-Item -Path $kampagneFolderPath -ItemType Directory | Out-Null
                                            $kampagneFilePath = Join-Path $kampagneFolderPath "Kampagne.txt"
                                            [System.IO.File]::WriteAllText($kampagneFilePath, "", $utf8BomEncoder)
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $logEntry = "Mappen 'Email' er blevet oprettet, mappen 'Kampagne' er blevet oprettet inden for den, og tekstfilen '$kampagneFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM kodning."
                                            Add-Content -Path $logFile -Value "$timestamp $logEntry"
                                            # $StatusLabel.SelectionColor = "Green"
                                            # $StatusLabel.SelectedText = "`n$logEntry"

                                            # Opret mappen "OLD" inden for mappen "Kampagne"
                                            $oldFolderPath = Join-Path $kampagneFolderPath "OLD"
                                            New-Item -Path $oldFolderPath -ItemType Directory | Out-Null
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $logEntry = "Mappen 'OLD' er blevet oprettet inden for mappen 'Kampagne'."
                                            Add-Content -Path $logFile -Value "$timestamp $logEntry"
                                            # $StatusLabel.SelectionColor = "Green"
                                            # $StatusLabel.SelectedText = "`n$logEntry"
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende oprettelse/opdatering af tekstfilen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under oprettelse/opdatering af tekstfilen '$kampagneFilePath':`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl vedrørende oprettelse/opdatering af mappen
                                    $errorMessage = $_.Exception.Message
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "Fejl under oprettelse/opdatering af 'Email' mappen og filen:`n$errorMessage"
                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                }

                                # Kontroller om mappen "Forvaltningsnavn" eksisterer
                                $forvaltningFolderPath = Join-Path $updatedFolderPath "Forvaltningsnavn"
                                try {
                                    if (!(Test-Path $forvaltningFolderPath)) {
                                        # Opret mappen "Forvaltningsnavn" med værdien
                                        New-Item -Path $forvaltningFolderPath -ItemType Directory | Out-Null
                                        $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                        [System.IO.File]::WriteAllText("$forvaltningFolderPath\Forvaltningsnavn.txt", $updatedForvName, $utf8BomEncoder)
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "Mappen 'Forvaltningsnavn' er blevet oprettet med værdien '$updatedForvName'."
                                        Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`n$logEntry"
                                    }
                                    else {
                                        # Kontroller om tekstfilen "Forvaltningsnavn.txt" eksisterer og indeholder den rigtige værdi
                                        $forvaltningFilePath = Join-Path $forvaltningFolderPath "Forvaltningsnavn.txt"
                                        try {
                                            if (Test-Path $forvaltningFilePath) {
                                                $currentForvaltningBytes = [System.IO.File]::ReadAllBytes($forvaltningFilePath)
                                                $isUtf8BomFormatted = ($currentForvaltningBytes[0] -eq 0xEF) -and ($currentForvaltningBytes[1] -eq 0xBB) -and ($currentForvaltningBytes[2] -eq 0xBF)
                                        
                                                if (!$isUtf8BomFormatted) {
                                                    $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                    [System.IO.File]::WriteAllText($forvaltningFilePath, $updatedForvName, $utf8BomEncoder)
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $logEntry = "Tekstfilen '$forvaltningFilePath' er blevet opdateret med værdien '$updatedForvName' i UTF8-BOM kodning."
                                                    Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"
                                                }
                                                elseif ((Get-Content -Path $forvaltningFilePath) -ne $updatedForvName) {
                                                    [System.IO.File]::WriteAllText($forvaltningFilePath, $updatedForvName)
                                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                    $logEntry = "Tekstfilen '$forvaltningFilePath' er blevet opdateret med værdien '$updatedForvName'."
                                                    Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"
                                                }
                                            }
                                            else {
                                                $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                [System.IO.File]::WriteAllText($forvaltningFilePath, $updatedForvName, $utf8BomEncoder)
                                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                                $logEntry = "Tekstfilen '$forvaltningFilePath' er blevet oprettet med værdien '$updatedForvName' i UTF8-BOM kodning."
                                                Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.SelectedText = "`n$logEntry"
                                            }
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende opdatering af tekstfilen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under opdatering af tekstfilen '$forvaltningFilePath':`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl vedrørende oprettelse/opdatering af mappen
                                    $errorMessage = $_.Exception.Message
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "Fejl under oprettelse/opdatering af 'Forvaltningsnavn' mappen og filen:`n$errorMessage"
                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                }

                                # Kontroller om mappen "Kampagne" eksisterer
                                $kampFolderPath = Join-Path $updatedFolderPath "Kampagne"
                                if (!(Test-Path $kampFolderPath)) {
                                    # Opret mappen "Kampagne"
                                    try {
                                        New-Item -Path $kampFolderPath -ItemType Directory -ErrorAction Stop | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "Ny mappe er oprettet: Kampagne"
                                        Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Kampagne"
                                    }
                                    catch {
                                        # Håndter eventuelle fejl, der opstår under oprettelse af mappen
                                        $errorMessage = $_.Exception.Message
                                        $StatusLabel.SelectionColor = "Red"
                                        $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Kampagne: $errorMessage"
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $errorLogEntry = "Fejl opstod under oprettelse af mappen 'Kampagne': $errorMessage"
                                        Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                    }
                                }
                                else {
                                    # Log eksisterende mappe uden at kaste en fejl
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $logEntry = "Mappen 'Kampagne' eksisterer allerede og bliver ikke opdateret"
                                    Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
                                }

                                # Kontroller om mappen "Logo" eksisterer
                                $LogoUpdateFolderPath = Join-Path $updatedFolderPath "Logo"
                                try {
                                    if (!(Test-Path $LogoUpdateFolderPath)) {
                                        # Opret mappen "Logo"
                                        New-Item -Path $LogoUpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Logo"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Logo"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Logo' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Logo: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Logo': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Webadresse" eksisterer
                                $WebadresseUpdateFolderPath = Join-Path $updatedFolderPath "Webadresse"
                                try {
                                    if (Test-Path $WebadresseUpdateFolderPath) {
                                        # Kontroller om tekstfilen "Webadresse.txt" eksisterer og er korrekt formatteret
                                        $webaddresseUpdateFilePath = Join-Path $WebadresseUpdateFolderPath "Webadresse.txt"
                                        try {
                                            if (Test-Path $webaddresseUpdateFilePath) {
                                                $webadresseUpdateContent = Get-Content -Path $webaddresseUpdateFilePath -Encoding UTF8
                                                if ($webadresseUpdateContent -notmatch "^\xEF\xBB\xBF") {
                                                    $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                    [System.IO.File]::WriteAllText($webaddresseUpdateFilePath, $webadresseUpdateContent, $utf8BomEncoder)
                                                    $logEntry = "Tekstfilen '$webaddresseUpdateFilePath' er blevet formatteret som UTF8-BOM uden at ændre indholdet."
                                                    Add-Content -Path $logFile -Value "[$(Get-Date -Format 'dd-MM-yyyy HH:mm:ss')] $logEntry"
                                                    # $StatusLabel.SelectionColor = "Green"
                                                    # $StatusLabel.SelectedText = "`n$logEntry"
                                                }
                                            }
                                            else {
                                                # Opret en tom tekstfil "Webadresse.txt" i UTF8-BOM format
                                                $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                                [System.IO.File]::WriteAllText($webaddresseUpdateFilePath, "", $utf8BomEncoder)
                                                $logEntry = "Tekstfilen '$webaddresseUpdateFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM format."
                                                Add-Content -Path $logFile -Value "[$(Get-Date -Format 'dd-MM-yyyy HH:mm:ss')] $logEntry"
                                                # $StatusLabel.SelectionColor = "Green"
                                                # $StatusLabel.SelectedText = "`n$logEntry"
                                            }
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende opdatering af tekstfilen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under opdatering af tekstfilen '$webaddresseUpdateFilePath':`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }
                                    }
                                    else {
                                        # Opret mappen "Webadresse" og en tom tekstfil "Webadresse.txt" i UTF8-BOM format
                                        New-Item -Path $WebadresseUpdateFolderPath -ItemType Directory | Out-Null
                                        $webaddresseUpdateFilePath = Join-Path $WebadresseUpdateFolderPath "Webadresse.txt"
                                        try {
                                            $utf8BomEncoder = New-Object System.Text.UTF8Encoding($true)
                                            [System.IO.File]::WriteAllText($webaddresseUpdateFilePath, "", $utf8BomEncoder)
                                            $logEntry = "Mappen 'Webadresse' er blevet oprettet, og tekstfilen '$webaddresseUpdateFilePath' er blevet oprettet som et tomt dokument i UTF8-BOM format."
                                            Add-Content -Path $logFile -Value "[$(Get-Date -Format 'dd-MM-yyyy HH:mm:ss')] $logEntry"
                                            # $StatusLabel.SelectionColor = "Green"
                                            # $StatusLabel.SelectedText = "`n$logEntry"
                                        }
                                        catch {
                                            # Håndter eventuelle fejl vedrørende oprettelse af tekstfilen
                                            $errorMessage = $_.Exception.Message
                                            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                            $errorLogEntry = "Fejl under oprettelse af tekstfilen '$webaddresseUpdateFilePath':`n$errorMessage"
                                            Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                            $StatusLabel.SelectionColor = "Red"
                                            $StatusLabel.SelectedText = "`n$errorLogEntry"
                                        }
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl vedrørende oprettelse/opdatering af mappen
                                    $errorMessage = $_.Exception.Message
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "Fejl under oprettelse/opdatering af 'Webadresse' mappen og filen:`n$errorMessage"
                                    Add-Content -Path $logFile -Value "[$timestamp] $errorLogEntry"
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`n$errorLogEntry"
                                }

                                # Kontroller om mappen "Weblink" eksisterer
                                $WeblinkUpdateFolderPath = Join-Path $updatedFolderPath "Weblink"
                                try {
                                    if (!(Test-Path $WeblinkUpdateFolderPath)) {
                                        # Opret mappen "Weblink"
                                        New-Item -Path $WeblinkUpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Weblink"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Weblink"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Weblink' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Weblink: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Weblink': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Weblink2" eksisterer
                                $Weblink2UpdateFolderPath = Join-Path $updatedFolderPath "Weblink2"
                                try {
                                    if (!(Test-Path $Weblink2UpdateFolderPath)) {
                                        # Opret mappen "Weblink2"
                                        New-Item -Path $Weblink2UpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Weblink2"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Weblink2"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Weblink2' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Weblink2: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Weblink2': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Webtxt" eksisterer
                                $WebtxtUpdateFolderPath = Join-Path $updatedFolderPath "Webtxt"
                                try {
                                    if (!(Test-Path $WebtxtUpdateFolderPath)) {
                                        # Opret mappen "Webtxt"
                                        New-Item -Path $WebtxtUpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Webtxt"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Webtxt"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Webtxt' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Webtxt: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Webtxt': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Webtxt2" eksisterer
                                $Webtxt2UpdateFolderPath = Join-Path $updatedFolderPath "Webtxt2"
                                try {
                                    if (!(Test-Path $Webtxt2UpdateFolderPath)) {
                                        # Opret mappen "Webtxt2"
                                        New-Item -Path $Webtxt2UpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Webtxt2"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Webtxt2"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Webtxt2' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Webtxt2: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Webtxt2': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }

                                # Kontroller om mappen "Åbningstider" eksisterer
                                $hoursUpdateFolderPath = Join-Path $updatedFolderPath "Åbningstider"
                                try {
                                    if (!(Test-Path $hoursUpdateFolderPath)) {
                                        # Opret mappen "Åbningstider"
                                        New-Item -Path $hoursUpdateFolderPath -ItemType Directory | Out-Null
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Ny mappe er oprettet: Åbningstider"
                                        Add-Content -Path $logFile -Value $logEntry
                                        # $StatusLabel.SelectionColor = "Green"
                                        # $StatusLabel.SelectedText = "`nNy mappe er oprettet: Åbningstider"
                                    }
                                    else {
                                        $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                        $logEntry = "[$timestamp] Mappen 'Åbningstider' eksisterer allerede og bliver ikke opdateret"
                                        Add-Content -Path $logFile -Value $logEntry
                                    }
                                }
                                catch {
                                    # Håndter eventuelle fejl, der opstår i try-blokken
                                    $errorMessage = $_.Exception.Message
                                    $StatusLabel.SelectionColor = "Red"
                                    $StatusLabel.SelectedText = "`nFejl under oprettelse af mappen Åbningstider: $errorMessage"
                                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                    $errorLogEntry = "[$timestamp] Fejl opstod under oprettelse af mappen 'Åbningstider': $errorMessage"
                                    Add-Content -Path $logFile -Value $errorLogEntry
                                }
                            }
                            catch {
                                $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                                $errorText = "Fejl: $_"
                                $logEntry = $errorText
                                Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
            
                                $StatusLabel.SelectionColor = "Orange"
                                $StatusLabel.SelectedText = "`n$errorText"
                            }                    
                        }
                        $StatusLabel.SelectionColor = "Green"
                        $StatusLabel.SelectedText = "`n`nAlle mappenavne og tekstfiler er blevet opdateret."
                    }
                }
                catch {
                    $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
                    $errorText = "Fejl: $_"
                    $logEntry = $errorText
                    Add-Content -Path $logFile -Value "[$timestamp] $logEntry"
            
                    $StatusLabel.SelectionColor = "Orange"
                    $StatusLabel.SelectedText = "`n$errorText"
                }
            })

        # Add click event to Delete Dynamic Template button
        $DeleteDynButton.Add_Click({
                # Display a message box
                $Message = "Scriptet er endnu ikke klar til at håndtere sletning af Dynamic Template`n"
                $Message += "`nForetag sletningen manuelt"
                [System.Windows.Forms.MessageBox]::Show($Message, "Advarsel", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
            })

 
        ############################################################################################ End of Setting up execution buttons  ############################################################################################
    })

# Adds buttons to the form
$Form.Controls.Add($BrowseButton)
$Form.Controls.Add($ExportButton)
$Form.Controls.Add($OpenFolderBtn)
$Form.Controls.Add($CancelBtn)
$Form.Controls.Add($CreateDynButton)
$Form.Controls.Add($ChangeDynButton)
$Form.Controls.Add($DeleteDynButton)

# Releases Excel upon closing the script
$Form.Add_FormClosing({
        try {
            if ($Excel -ne $null -and $global:Workbook -ne $null) {
                [System.GC]::Collect()
                [System.GC]::WaitForPendingFinalizers()
                $Workbook.Close($false)
                $Excel.Quit()                
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Workbook = $null
                $global:Excel = $null
            }
        }
        catch {
            $timestamp = Get-Date -Format "dd-MM-yyyy HH:mm:ss"
            $logEntry = "[$timestamp] Fejl opstod under lukning af Workbook og afslutning af Excel i afslutning af scriptet: $_"
            Add-Content -Path $logfile -Value $logEntry
        }
        finally {
            if ($global:Workbook -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Workbook)
                $global:Workbook = $null
            }
            if ($global:Excel -ne $null) {
                [System.Runtime.InteropServices.Marshal]::ReleaseComObject($global:Excel)
                $global:Excel = $null
            }
            [System.GC]::Collect()
            [System.GC]::WaitForPendingFinalizers()
        }
    })

# Show the form
$Form.ShowDialog() | Out-Null
